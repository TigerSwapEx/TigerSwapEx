{\rtf1\ansi\ansicpg1252\cocoartf2578
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red172\green172\blue193;\red79\green123\blue61;\red26\green26\blue41;
\red70\green137\blue204;\red167\green197\blue152;\red212\green212\blue212;\red45\green175\blue118;\red13\green102\blue149;
\red14\green86\blue166;\red31\green133\blue64;\red140\green108\blue11;\red253\green181\blue13;\red237\green114\blue173;
\red194\green126\blue101;\red187\green97\blue44;\red115\green123\blue132;}
{\*\expandedcolortbl;;\cssrgb\c72941\c73333\c80000;\cssrgb\c37647\c54510\c30588;\cssrgb\c13333\c13725\c21176;
\cssrgb\c33725\c61176\c83922;\cssrgb\c70980\c80784\c65882;\cssrgb\c86275\c86275\c86275;\cssrgb\c19608\c72941\c53725;\cssrgb\c0\c47843\c65098;
\cssrgb\c3137\c42353\c70980;\cssrgb\c12941\c58039\c31765;\cssrgb\c61961\c49412\c3137;\cssrgb\c100000\c75686\c2745;\cssrgb\c95294\c54118\c73333;
\cssrgb\c80784\c56863\c47059;\cssrgb\c78824\c45882\c22353;\cssrgb\c52549\c55686\c58824;}
\paperw11900\paperh16840\margl1440\margr1440\vieww13940\viewh10320\viewkind0
\deftab720
\pard\pardeftab720\sl360\partightenfactor0

\f0\fs24 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf3 \cb4 \strokec3 // SPDX-License-Identifier: MIT\cf2 \cb1 \strokec2 \
\
\
\pard\pardeftab720\sl360\partightenfactor0
\cf5 \cb4 \strokec5 pragma\cf2 \strokec2  \cf5 \strokec5 solidity\cf2 \strokec2  \cf6 \strokec6 0.6.12\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\
\
\
\pard\pardeftab720\sl360\partightenfactor0
\cf3 \cb4 \strokec3 /**\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3  * @title Helps contracts guard against reentrancy attacks.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3  * @author Remco Bloemen <remco@2\uc0\u960 .com>, Eenae <alexey@mixbytes.io>\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3  * @dev If you mark a function `nonReentrant`, you should also\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3  * mark it `external`.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3  */\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf5 \cb4 \strokec5 contract\cf2 \strokec2  ReentrancyGuard \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb4   \cf3 \strokec3 /// @dev counter to allow mutex lock with only one SSTORE operation\cf2 \cb1 \strokec2 \
\cb4   \cf5 \strokec5 uint256\cf2 \strokec2  \cf8 \strokec8 private\cf2 \strokec2  _guardCounter \cf7 \strokec7 =\cf2 \strokec2  \cf6 \strokec6 1\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\
\cb4   \cf3 \strokec3 /**\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf3 \cb4 \strokec3    * @dev Prevents a contract from calling itself, directly or indirectly.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3    * If you mark a function `nonReentrant`, you should also\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3    * mark it `external`. Calling one `nonReentrant` function from\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3    * another is not supported. Instead, you can implement a\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3    * `private` function doing the actual work, and an `external`\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3    * wrapper marked as `nonReentrant`.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3    */\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb4   \cf5 \strokec5 modifier\cf2 \strokec2  nonReentrant\cf7 \strokec7 ()\cf2 \strokec2  \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4     _guardCounter \cf7 \strokec7 +=\cf2 \strokec2  \cf6 \strokec6 1\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\cb4     \cf5 \strokec5 uint256\cf2 \strokec2  localCounter \cf7 \strokec7 =\cf2 \strokec2  _guardCounter\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\cb4     _\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\cb4     \cf9 \strokec9 require\cf7 \strokec7 (\cf2 \strokec2 localCounter \cf7 \strokec7 ==\cf2 \strokec2  _guardCounter\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4   \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\
\pard\pardeftab720\sl360\partightenfactor0
\cf7 \cb4 \strokec7 \}\cf2 \cb1 \strokec2 \
\
\
\pard\pardeftab720\sl360\partightenfactor0
\cf3 \cb4 \strokec3 // pragma solidity >=0.6.0 <0.8.0;\cf2 \cb1 \strokec2 \
\
\cf3 \cb4 \strokec3 /*\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3  * @dev Provides information about the current execution context, including the\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3  * sender of the transaction and its data. While these are generally available\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3  * via msg.sender and msg.data, they should not be accessed in such a direct\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3  * manner, since when dealing with GSN meta-transactions the account sending and\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3  * paying for execution may not be the actual sender (as far as an application\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3  * is concerned).\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3  *\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3  * This contract is only required for intermediate, library-like contracts.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3  */\cf2 \cb1 \strokec2 \
\
\pard\pardeftab720\sl360\partightenfactor0
\cf5 \cb4 \strokec5 abstract\cf2 \strokec2  \cf5 \strokec5 contract\cf2 \strokec2  Context \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb4     \cf5 \strokec5 function\cf2 \strokec2  _msgSender\cf7 \strokec7 ()\cf2 \strokec2  \cf8 \strokec8 internal\cf2 \strokec2  \cf8 \strokec8 view\cf2 \strokec2  \cf10 \strokec10 virtual\cf2 \strokec2  \cf11 \strokec11 returns\cf2 \strokec2  \cf7 \strokec7 (\cf5 \strokec5 address\cf2 \strokec2  \cf8 \strokec8 payable\cf7 \strokec7 )\cf2 \strokec2  \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4         \cf11 \strokec11 return\cf2 \strokec2  \cf9 \strokec9 msg\cf7 \strokec7 .\cf2 \strokec2 sender\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\cb4     \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\
\cb4     \cf5 \strokec5 function\cf2 \strokec2  _msgData\cf7 \strokec7 ()\cf2 \strokec2  \cf8 \strokec8 internal\cf2 \strokec2  \cf8 \strokec8 view\cf2 \strokec2  \cf10 \strokec10 virtual\cf2 \strokec2  \cf11 \strokec11 returns\cf2 \strokec2  \cf7 \strokec7 (\cf9 \strokec9 bytes\cf2 \strokec2  \cf12 \strokec12 memory\cf7 \strokec7 )\cf2 \strokec2  \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4         \cf10 \strokec10 this\cf7 \strokec7 ;\cf2 \strokec2  \cf3 \strokec3 // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\cf2 \cb1 \strokec2 \
\cb4         \cf11 \strokec11 return\cf2 \strokec2  \cf9 \strokec9 msg\cf7 \strokec7 .\cf2 \strokec2 data\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\cb4     \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf7 \cb4 \strokec7 \}\cf2 \cb1 \strokec2 \
\
\
\
\
\
\pard\pardeftab720\sl360\partightenfactor0
\cf3 \cb4 \strokec3 // pragma solidity >=0.6.0 <0.8.0;\cf2 \cb1 \strokec2 \
\
\cf3 \cb4 \strokec3 /**\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3  * @dev Contract module which provides a basic access control mechanism, where\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3  * there is an account (an owner) that can be granted exclusive access to\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3  * specific functions.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3  *\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3  * By default, the owner account will be the one that deploys the contract. This\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3  * can later be changed with \{transferOwnership\}.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3  *\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3  * This module is used through inheritance. It will make available the modifier\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3  * `onlyOwner`, which can be applied to your functions to restrict their use to\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3  * the owner.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3  */\cf2 \cb1 \strokec2 \
\
\
\pard\pardeftab720\sl360\partightenfactor0
\cf5 \cb4 \strokec5 abstract\cf2 \strokec2  \cf5 \strokec5 contract\cf2 \strokec2  Ownable \cf5 \strokec5 is\cf2 \strokec2  Context \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb4     \cf5 \strokec5 address\cf2 \strokec2  \cf8 \strokec8 private\cf2 \strokec2  _owner\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\
\cb4     \cf5 \strokec5 event\cf2 \strokec2  OwnershipTransferred\cf7 \strokec7 (\cf5 \strokec5 address\cf2 \strokec2  \cf13 \strokec13 indexed\cf2 \strokec2  previousOwner\cf7 \strokec7 ,\cf2 \strokec2  \cf5 \strokec5 address\cf2 \strokec2  \cf13 \strokec13 indexed\cf2 \strokec2  newOwner\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\
\cb4     \cf3 \strokec3 /**\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf3 \cb4 \strokec3      * @dev Initializes the contract setting the deployer as the initial owner.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      */\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb4     \cf14 \strokec14 constructor\cf2 \strokec2  \cf7 \strokec7 ()\cf2 \strokec2  \cf8 \strokec8 internal\cf2 \strokec2  \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4         \cf5 \strokec5 address\cf2 \strokec2  msgSender \cf7 \strokec7 =\cf2 \strokec2  _msgSender\cf7 \strokec7 ();\cf2 \cb1 \strokec2 \
\cb4         _owner \cf7 \strokec7 =\cf2 \strokec2  msgSender\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\cb4         \cf5 \strokec5 emit\cf2 \strokec2  OwnershipTransferred\cf7 \strokec7 (\cf5 \strokec5 address\cf7 \strokec7 (\cf6 \strokec6 0\cf7 \strokec7 ),\cf2 \strokec2  msgSender\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4     \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\
\cb4     \cf3 \strokec3 /**\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf3 \cb4 \strokec3      * @dev Returns the address of the current owner.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      */\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb4     \cf5 \strokec5 function\cf2 \strokec2  owner\cf7 \strokec7 ()\cf2 \strokec2  \cf8 \strokec8 public\cf2 \strokec2  \cf8 \strokec8 view\cf2 \strokec2  \cf11 \strokec11 returns\cf2 \strokec2  \cf7 \strokec7 (\cf5 \strokec5 address\cf7 \strokec7 )\cf2 \strokec2  \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4         \cf11 \strokec11 return\cf2 \strokec2  _owner\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\cb4     \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\
\cb4     \cf3 \strokec3 /**\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf3 \cb4 \strokec3      * @dev Throws if called by any account other than the owner.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      */\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb4     \cf5 \strokec5 modifier\cf2 \strokec2  onlyOwner\cf7 \strokec7 ()\cf2 \strokec2  \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4         \cf9 \strokec9 require\cf7 \strokec7 (\cf2 \strokec2 _owner \cf7 \strokec7 ==\cf2 \strokec2  _msgSender\cf7 \strokec7 (),\cf2 \strokec2  \cf15 \strokec15 "Ownable: caller is not the owner"\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4         _\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\cb4     \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\
\cb4     \cf3 \strokec3 /**\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf3 \cb4 \strokec3      * @dev Leaves the contract without owner. It will not be possible to call\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * `onlyOwner` functions anymore. Can only be called by the current owner.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      *\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * NOTE: Renouncing ownership will leave the contract without an owner,\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * thereby removing any functionality that is only available to the owner.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      */\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb4     \cf5 \strokec5 function\cf2 \strokec2  renounceOwnership\cf7 \strokec7 ()\cf2 \strokec2  \cf8 \strokec8 public\cf2 \strokec2  \cf10 \strokec10 virtual\cf2 \strokec2  onlyOwner \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4         \cf5 \strokec5 emit\cf2 \strokec2  OwnershipTransferred\cf7 \strokec7 (\cf2 \strokec2 _owner\cf7 \strokec7 ,\cf2 \strokec2  \cf5 \strokec5 address\cf7 \strokec7 (\cf6 \strokec6 0\cf7 \strokec7 ));\cf2 \cb1 \strokec2 \
\cb4         _owner \cf7 \strokec7 =\cf2 \strokec2  \cf5 \strokec5 address\cf7 \strokec7 (\cf6 \strokec6 0\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4     \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\
\cb4     \cf3 \strokec3 /**\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf3 \cb4 \strokec3      * @dev Transfers ownership of the contract to a new account (`newOwner`).\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * Can only be called by the current owner.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      */\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb4     \cf5 \strokec5 function\cf2 \strokec2  transferOwnership\cf7 \strokec7 (\cf5 \strokec5 address\cf2 \strokec2  newOwner\cf7 \strokec7 )\cf2 \strokec2  \cf8 \strokec8 public\cf2 \strokec2  \cf10 \strokec10 virtual\cf2 \strokec2  onlyOwner \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4         \cf9 \strokec9 require\cf7 \strokec7 (\cf2 \strokec2 newOwner \cf7 \strokec7 !=\cf2 \strokec2  \cf5 \strokec5 address\cf7 \strokec7 (\cf6 \strokec6 0\cf7 \strokec7 ),\cf2 \strokec2  \cf15 \strokec15 "Ownable: new owner is the zero address"\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4         \cf5 \strokec5 emit\cf2 \strokec2  OwnershipTransferred\cf7 \strokec7 (\cf2 \strokec2 _owner\cf7 \strokec7 ,\cf2 \strokec2  newOwner\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4         _owner \cf7 \strokec7 =\cf2 \strokec2  newOwner\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\cb4     \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf7 \cb4 \strokec7 \}\cf2 \cb1 \strokec2 \
\
\
\
\
\
\pard\pardeftab720\sl360\partightenfactor0
\cf3 \cb4 \strokec3 // pragma solidity >=0.6.4;\cf2 \cb1 \strokec2 \
\
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb4 interface IBEP20 \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4     \cf3 \strokec3 /**\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf3 \cb4 \strokec3      * @dev Returns the amount of tokens in existence.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      */\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb4     \cf5 \strokec5 function\cf2 \strokec2  totalSupply\cf7 \strokec7 ()\cf2 \strokec2  \cf8 \strokec8 external\cf2 \strokec2  \cf8 \strokec8 view\cf2 \strokec2  \cf11 \strokec11 returns\cf2 \strokec2  \cf7 \strokec7 (\cf5 \strokec5 uint256\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\
\cb4     \cf3 \strokec3 /**\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf3 \cb4 \strokec3      * @dev Returns the amount of max token supply in existence.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      */\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb4     \cf5 \strokec5 function\cf2 \strokec2  maxSupply\cf7 \strokec7 ()\cf2 \strokec2  \cf8 \strokec8 external\cf2 \strokec2  \cf8 \strokec8 view\cf2 \strokec2  \cf11 \strokec11 returns\cf2 \strokec2  \cf7 \strokec7 (\cf5 \strokec5 uint256\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\
\cb4     \cf3 \strokec3 /**\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf3 \cb4 \strokec3      * @dev Returns the token decimals.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      */\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb4     \cf5 \strokec5 function\cf2 \strokec2  decimals\cf7 \strokec7 ()\cf2 \strokec2  \cf8 \strokec8 external\cf2 \strokec2  \cf8 \strokec8 view\cf2 \strokec2  \cf11 \strokec11 returns\cf2 \strokec2  \cf7 \strokec7 (\cf5 \strokec5 uint8\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\
\cb4     \cf3 \strokec3 /**\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf3 \cb4 \strokec3      * @dev Returns the token symbol.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      */\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb4     \cf5 \strokec5 function\cf2 \strokec2  symbol\cf7 \strokec7 ()\cf2 \strokec2  \cf8 \strokec8 external\cf2 \strokec2  \cf8 \strokec8 view\cf2 \strokec2  \cf11 \strokec11 returns\cf2 \strokec2  \cf7 \strokec7 (\cf5 \strokec5 string\cf2 \strokec2  \cf12 \strokec12 memory\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\
\cb4     \cf3 \strokec3 /**\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf3 \cb4 \strokec3      * @dev Returns the token name.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      */\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb4     \cf5 \strokec5 function\cf2 \strokec2  name\cf7 \strokec7 ()\cf2 \strokec2  \cf8 \strokec8 external\cf2 \strokec2  \cf8 \strokec8 view\cf2 \strokec2  \cf11 \strokec11 returns\cf2 \strokec2  \cf7 \strokec7 (\cf5 \strokec5 string\cf2 \strokec2  \cf12 \strokec12 memory\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\
\cb4     \cf3 \strokec3 /**\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf3 \cb4 \strokec3      * @dev Returns the bep token owner.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      */\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb4     \cf5 \strokec5 function\cf2 \strokec2  getOwner\cf7 \strokec7 ()\cf2 \strokec2  \cf8 \strokec8 external\cf2 \strokec2  \cf8 \strokec8 view\cf2 \strokec2  \cf11 \strokec11 returns\cf2 \strokec2  \cf7 \strokec7 (\cf5 \strokec5 address\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\
\cb4     \cf3 \strokec3 /**\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf3 \cb4 \strokec3      * @dev Returns the amount of tokens owned by `account`.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      */\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb4     \cf5 \strokec5 function\cf2 \strokec2  balanceOf\cf7 \strokec7 (\cf5 \strokec5 address\cf2 \strokec2  account\cf7 \strokec7 )\cf2 \strokec2  \cf8 \strokec8 external\cf2 \strokec2  \cf8 \strokec8 view\cf2 \strokec2  \cf11 \strokec11 returns\cf2 \strokec2  \cf7 \strokec7 (\cf5 \strokec5 uint256\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\
\cb4     \cf3 \strokec3 /**\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf3 \cb4 \strokec3      * @dev Moves `amount` tokens from the caller's account to `recipient`.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      *\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * Returns a boolean value indicating whether the operation succeeded.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      *\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * Emits a \{Transfer\} event.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      */\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb4     \cf5 \strokec5 function\cf2 \strokec2  transfer\cf7 \strokec7 (\cf5 \strokec5 address\cf2 \strokec2  recipient\cf7 \strokec7 ,\cf2 \strokec2  \cf5 \strokec5 uint256\cf2 \strokec2  amount\cf7 \strokec7 )\cf2 \strokec2  \cf8 \strokec8 external\cf2 \strokec2  \cf11 \strokec11 returns\cf2 \strokec2  \cf7 \strokec7 (\cf5 \strokec5 bool\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\
\cb4     \cf3 \strokec3 /**\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf3 \cb4 \strokec3      * @dev Returns the remaining number of tokens that `spender` will be\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * allowed to spend on behalf of `owner` through \{transferFrom\}. This is\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * zero by default.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      *\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * This value changes when \{approve\} or \{transferFrom\} are called.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      */\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb4     \cf5 \strokec5 function\cf2 \strokec2  allowance\cf7 \strokec7 (\cf5 \strokec5 address\cf2 \strokec2  _owner\cf7 \strokec7 ,\cf2 \strokec2  \cf5 \strokec5 address\cf2 \strokec2  spender\cf7 \strokec7 )\cf2 \strokec2  \cf8 \strokec8 external\cf2 \strokec2  \cf8 \strokec8 view\cf2 \strokec2  \cf11 \strokec11 returns\cf2 \strokec2  \cf7 \strokec7 (\cf5 \strokec5 uint256\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\
\cb4     \cf3 \strokec3 /**\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf3 \cb4 \strokec3      * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      *\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * Returns a boolean value indicating whether the operation succeeded.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      *\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * IMPORTANT: Beware that changing an allowance with this method brings the risk\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * that someone may use both the old and the new allowance by unfortunate\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * transaction ordering. One possible solution to mitigate this race\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * condition is to first reduce the spender's allowance to 0 and set the\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * desired value afterwards:\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      *\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * Emits an \{Approval\} event.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      */\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb4     \cf5 \strokec5 function\cf2 \strokec2  approve\cf7 \strokec7 (\cf5 \strokec5 address\cf2 \strokec2  spender\cf7 \strokec7 ,\cf2 \strokec2  \cf5 \strokec5 uint256\cf2 \strokec2  amount\cf7 \strokec7 )\cf2 \strokec2  \cf8 \strokec8 external\cf2 \strokec2  \cf11 \strokec11 returns\cf2 \strokec2  \cf7 \strokec7 (\cf5 \strokec5 bool\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\
\cb4     \cf3 \strokec3 /**\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf3 \cb4 \strokec3      * @dev Moves `amount` tokens from `sender` to `recipient` using the\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * allowance mechanism. `amount` is then deducted from the caller's\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * allowance.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      *\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * Returns a boolean value indicating whether the operation succeeded.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      *\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * Emits a \{Transfer\} event.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      */\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb4     \cf5 \strokec5 function\cf2 \strokec2  transferFrom\cf7 \strokec7 (\cf5 \strokec5 address\cf2 \strokec2  sender\cf7 \strokec7 ,\cf2 \strokec2  \cf5 \strokec5 address\cf2 \strokec2  recipient\cf7 \strokec7 ,\cf2 \strokec2  \cf5 \strokec5 uint256\cf2 \strokec2  amount\cf7 \strokec7 )\cf2 \strokec2  \cf8 \strokec8 external\cf2 \strokec2  \cf11 \strokec11 returns\cf2 \strokec2  \cf7 \strokec7 (\cf5 \strokec5 bool\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\
\cb4     \cf3 \strokec3 /**\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf3 \cb4 \strokec3      * @dev Emitted when `value` tokens are moved from one account (`from`) to\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * another (`to`).\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      *\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * Note that `value` may be zero.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      */\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb4     \cf5 \strokec5 event\cf2 \strokec2  Transfer\cf7 \strokec7 (\cf5 \strokec5 address\cf2 \strokec2  \cf13 \strokec13 indexed\cf2 \strokec2  from\cf7 \strokec7 ,\cf2 \strokec2  \cf5 \strokec5 address\cf2 \strokec2  \cf13 \strokec13 indexed\cf2 \strokec2  to\cf7 \strokec7 ,\cf2 \strokec2  \cf5 \strokec5 uint256\cf2 \strokec2  value\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\
\cb4     \cf3 \strokec3 /**\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf3 \cb4 \strokec3      * @dev Emitted when the allowance of a `spender` for an `owner` is set by\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * a call to \{approve\}. `value` is the new allowance.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      */\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb4     \cf5 \strokec5 event\cf2 \strokec2  Approval\cf7 \strokec7 (\cf5 \strokec5 address\cf2 \strokec2  \cf13 \strokec13 indexed\cf2 \strokec2  owner\cf7 \strokec7 ,\cf2 \strokec2  \cf5 \strokec5 address\cf2 \strokec2  \cf13 \strokec13 indexed\cf2 \strokec2  spender\cf7 \strokec7 ,\cf2 \strokec2  \cf5 \strokec5 uint256\cf2 \strokec2  value\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf7 \cb4 \strokec7 \}\cf2 \cb1 \strokec2 \
\
\
\
\
\
\
\pard\pardeftab720\sl360\partightenfactor0
\cf3 \cb4 \strokec3 // pragma solidity >=0.6.0 <0.8.0;\cf2 \cb1 \strokec2 \
\
\cf3 \cb4 \strokec3 /**\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3  * @dev Wrappers over Solidity's arithmetic operations with added overflow\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3  * checks.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3  *\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3  * Arithmetic operations in Solidity wrap on overflow. This can easily result\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3  * in bugs, because programmers usually assume that an overflow raises an\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3  * error, which is the standard behavior in high level programming languages.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3  * `SafeMath` restores this intuition by reverting the transaction when an\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3  * operation overflows.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3  *\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3  * Using this library instead of the unchecked operations eliminates an entire\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3  * class of bugs, so it's recommended to use it always.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3  */\cf2 \cb1 \strokec2 \
\
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb4  \cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf5 \cb4 \strokec5 library\cf2 \strokec2  SafeMath \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb4     \cf3 \strokec3 /**\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf3 \cb4 \strokec3      * @dev Returns the addition of two unsigned integers, reverting on\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * overflow.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      *\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * Counterpart to Solidity's `+` operator.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      *\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * Requirements:\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      *\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * - Addition cannot overflow.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      */\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb4     \cf5 \strokec5 function\cf2 \strokec2  add\cf7 \strokec7 (\cf5 \strokec5 uint256\cf2 \strokec2  a\cf7 \strokec7 ,\cf2 \strokec2  \cf5 \strokec5 uint256\cf2 \strokec2  b\cf7 \strokec7 )\cf2 \strokec2  \cf8 \strokec8 internal\cf2 \strokec2  \cf8 \strokec8 pure\cf2 \strokec2  \cf11 \strokec11 returns\cf2 \strokec2  \cf7 \strokec7 (\cf5 \strokec5 uint256\cf7 \strokec7 )\cf2 \strokec2  \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4         \cf5 \strokec5 uint256\cf2 \strokec2  c \cf7 \strokec7 =\cf2 \strokec2  a \cf7 \strokec7 +\cf2 \strokec2  b\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\cb4         \cf9 \strokec9 require\cf7 \strokec7 (\cf2 \strokec2 c \cf7 \strokec7 >=\cf2 \strokec2  a\cf7 \strokec7 ,\cf2 \strokec2  \cf15 \strokec15 "SafeMath: addition overflow"\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\
\cb4         \cf11 \strokec11 return\cf2 \strokec2  c\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\cb4     \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\
\cb4     \cf3 \strokec3 /**\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf3 \cb4 \strokec3      * @dev Returns the subtraction of two unsigned integers, reverting on\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * overflow (when the result is negative).\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      *\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * Counterpart to Solidity's `-` operator.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      *\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * Requirements:\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      *\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * - Subtraction cannot overflow.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      */\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb4     \cf5 \strokec5 function\cf2 \strokec2  sub\cf7 \strokec7 (\cf5 \strokec5 uint256\cf2 \strokec2  a\cf7 \strokec7 ,\cf2 \strokec2  \cf5 \strokec5 uint256\cf2 \strokec2  b\cf7 \strokec7 )\cf2 \strokec2  \cf8 \strokec8 internal\cf2 \strokec2  \cf8 \strokec8 pure\cf2 \strokec2  \cf11 \strokec11 returns\cf2 \strokec2  \cf7 \strokec7 (\cf5 \strokec5 uint256\cf7 \strokec7 )\cf2 \strokec2  \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4         \cf11 \strokec11 return\cf2 \strokec2  sub\cf7 \strokec7 (\cf2 \strokec2 a\cf7 \strokec7 ,\cf2 \strokec2  b\cf7 \strokec7 ,\cf2 \strokec2  \cf15 \strokec15 "SafeMath: subtraction overflow"\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4     \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\
\cb4     \cf3 \strokec3 /**\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf3 \cb4 \strokec3      * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * overflow (when the result is negative).\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      *\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * Counterpart to Solidity's `-` operator.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      *\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * Requirements:\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      *\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * - Subtraction cannot overflow.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      */\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb4     \cf5 \strokec5 function\cf2 \strokec2  sub\cf7 \strokec7 (\cf5 \strokec5 uint256\cf2 \strokec2  a\cf7 \strokec7 ,\cf2 \strokec2  \cf5 \strokec5 uint256\cf2 \strokec2  b\cf7 \strokec7 ,\cf2 \strokec2  \cf5 \strokec5 string\cf2 \strokec2  \cf12 \strokec12 memory\cf2 \strokec2  errorMessage\cf7 \strokec7 )\cf2 \strokec2  \cf8 \strokec8 internal\cf2 \strokec2  \cf8 \strokec8 pure\cf2 \strokec2  \cf11 \strokec11 returns\cf2 \strokec2  \cf7 \strokec7 (\cf5 \strokec5 uint256\cf7 \strokec7 )\cf2 \strokec2  \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4         \cf9 \strokec9 require\cf7 \strokec7 (\cf2 \strokec2 b \cf7 \strokec7 <=\cf2 \strokec2  a\cf7 \strokec7 ,\cf2 \strokec2  errorMessage\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4         \cf5 \strokec5 uint256\cf2 \strokec2  c \cf7 \strokec7 =\cf2 \strokec2  a \cf7 \strokec7 -\cf2 \strokec2  b\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\
\cb4         \cf11 \strokec11 return\cf2 \strokec2  c\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\cb4     \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\
\cb4     \cf3 \strokec3 /**\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf3 \cb4 \strokec3      * @dev Returns the multiplication of two unsigned integers, reverting on\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * overflow.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      *\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * Counterpart to Solidity's `*` operator.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      *\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * Requirements:\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      *\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * - Multiplication cannot overflow.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      */\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb4     \cf5 \strokec5 function\cf2 \strokec2  mul\cf7 \strokec7 (\cf5 \strokec5 uint256\cf2 \strokec2  a\cf7 \strokec7 ,\cf2 \strokec2  \cf5 \strokec5 uint256\cf2 \strokec2  b\cf7 \strokec7 )\cf2 \strokec2  \cf8 \strokec8 internal\cf2 \strokec2  \cf8 \strokec8 pure\cf2 \strokec2  \cf11 \strokec11 returns\cf2 \strokec2  \cf7 \strokec7 (\cf5 \strokec5 uint256\cf7 \strokec7 )\cf2 \strokec2  \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4         \cf3 \strokec3 // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\cf2 \cb1 \strokec2 \
\cb4         \cf3 \strokec3 // benefit is lost if 'b' is also tested.\cf2 \cb1 \strokec2 \
\cb4         \cf3 \strokec3 // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\cf2 \cb1 \strokec2 \
\cb4         \cf13 \strokec13 if\cf2 \strokec2  \cf7 \strokec7 (\cf2 \strokec2 a \cf7 \strokec7 ==\cf2 \strokec2  \cf6 \strokec6 0\cf7 \strokec7 )\cf2 \strokec2  \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4             \cf11 \strokec11 return\cf2 \strokec2  \cf6 \strokec6 0\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\cb4         \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\
\cb4         \cf5 \strokec5 uint256\cf2 \strokec2  c \cf7 \strokec7 =\cf2 \strokec2  a \cf7 \strokec7 *\cf2 \strokec2  b\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\cb4         \cf9 \strokec9 require\cf7 \strokec7 (\cf2 \strokec2 c \cf7 \strokec7 /\cf2 \strokec2  a \cf7 \strokec7 ==\cf2 \strokec2  b\cf7 \strokec7 ,\cf2 \strokec2  \cf15 \strokec15 "SafeMath: multiplication overflow"\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\
\cb4         \cf11 \strokec11 return\cf2 \strokec2  c\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\cb4     \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\
\cb4     \cf3 \strokec3 /**\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf3 \cb4 \strokec3      * @dev Returns the integer division of two unsigned integers. Reverts on\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * division by zero. The result is rounded towards zero.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      *\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * Counterpart to Solidity's `/` operator. Note: this function uses a\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * `revert` opcode (which leaves remaining gas untouched) while Solidity\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * uses an invalid opcode to revert (consuming all remaining gas).\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      *\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * Requirements:\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      *\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * - The divisor cannot be zero.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      */\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb4     \cf5 \strokec5 function\cf2 \strokec2  div\cf7 \strokec7 (\cf5 \strokec5 uint256\cf2 \strokec2  a\cf7 \strokec7 ,\cf2 \strokec2  \cf5 \strokec5 uint256\cf2 \strokec2  b\cf7 \strokec7 )\cf2 \strokec2  \cf8 \strokec8 internal\cf2 \strokec2  \cf8 \strokec8 pure\cf2 \strokec2  \cf11 \strokec11 returns\cf2 \strokec2  \cf7 \strokec7 (\cf5 \strokec5 uint256\cf7 \strokec7 )\cf2 \strokec2  \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4         \cf11 \strokec11 return\cf2 \strokec2  div\cf7 \strokec7 (\cf2 \strokec2 a\cf7 \strokec7 ,\cf2 \strokec2  b\cf7 \strokec7 ,\cf2 \strokec2  \cf15 \strokec15 "SafeMath: division by zero"\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4     \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\
\cb4     \cf3 \strokec3 /**\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf3 \cb4 \strokec3      * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * division by zero. The result is rounded towards zero.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      *\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * Counterpart to Solidity's `/` operator. Note: this function uses a\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * `revert` opcode (which leaves remaining gas untouched) while Solidity\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * uses an invalid opcode to revert (consuming all remaining gas).\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      *\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * Requirements:\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      *\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * - The divisor cannot be zero.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      */\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb4     \cf5 \strokec5 function\cf2 \strokec2  div\cf7 \strokec7 (\cf5 \strokec5 uint256\cf2 \strokec2  a\cf7 \strokec7 ,\cf2 \strokec2  \cf5 \strokec5 uint256\cf2 \strokec2  b\cf7 \strokec7 ,\cf2 \strokec2  \cf5 \strokec5 string\cf2 \strokec2  \cf12 \strokec12 memory\cf2 \strokec2  errorMessage\cf7 \strokec7 )\cf2 \strokec2  \cf8 \strokec8 internal\cf2 \strokec2  \cf8 \strokec8 pure\cf2 \strokec2  \cf11 \strokec11 returns\cf2 \strokec2  \cf7 \strokec7 (\cf5 \strokec5 uint256\cf7 \strokec7 )\cf2 \strokec2  \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4         \cf9 \strokec9 require\cf7 \strokec7 (\cf2 \strokec2 b \cf7 \strokec7 >\cf2 \strokec2  \cf6 \strokec6 0\cf7 \strokec7 ,\cf2 \strokec2  errorMessage\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4         \cf5 \strokec5 uint256\cf2 \strokec2  c \cf7 \strokec7 =\cf2 \strokec2  a \cf7 \strokec7 /\cf2 \strokec2  b\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\cb4         \cf3 \strokec3 // assert(a == b * c + a % b); // There is no case in which this doesn't hold\cf2 \cb1 \strokec2 \
\
\cb4         \cf11 \strokec11 return\cf2 \strokec2  c\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\cb4     \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\
\cb4     \cf3 \strokec3 /**\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf3 \cb4 \strokec3      * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * Reverts when dividing by zero.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      *\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * Counterpart to Solidity's `%` operator. This function uses a `revert`\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * opcode (which leaves remaining gas untouched) while Solidity uses an\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * invalid opcode to revert (consuming all remaining gas).\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      *\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * Requirements:\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      *\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * - The divisor cannot be zero.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      */\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb4     \cf5 \strokec5 function\cf2 \strokec2  mod\cf7 \strokec7 (\cf5 \strokec5 uint256\cf2 \strokec2  a\cf7 \strokec7 ,\cf2 \strokec2  \cf5 \strokec5 uint256\cf2 \strokec2  b\cf7 \strokec7 )\cf2 \strokec2  \cf8 \strokec8 internal\cf2 \strokec2  \cf8 \strokec8 pure\cf2 \strokec2  \cf11 \strokec11 returns\cf2 \strokec2  \cf7 \strokec7 (\cf5 \strokec5 uint256\cf7 \strokec7 )\cf2 \strokec2  \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4         \cf11 \strokec11 return\cf2 \strokec2  mod\cf7 \strokec7 (\cf2 \strokec2 a\cf7 \strokec7 ,\cf2 \strokec2  b\cf7 \strokec7 ,\cf2 \strokec2  \cf15 \strokec15 "SafeMath: modulo by zero"\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4     \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\
\cb4     \cf3 \strokec3 /**\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf3 \cb4 \strokec3      * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * Reverts with custom message when dividing by zero.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      *\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * Counterpart to Solidity's `%` operator. This function uses a `revert`\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * opcode (which leaves remaining gas untouched) while Solidity uses an\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * invalid opcode to revert (consuming all remaining gas).\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      *\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * Requirements:\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      *\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * - The divisor cannot be zero.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      */\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb4     \cf5 \strokec5 function\cf2 \strokec2  mod\cf7 \strokec7 (\cf5 \strokec5 uint256\cf2 \strokec2  a\cf7 \strokec7 ,\cf2 \strokec2  \cf5 \strokec5 uint256\cf2 \strokec2  b\cf7 \strokec7 ,\cf2 \strokec2  \cf5 \strokec5 string\cf2 \strokec2  \cf12 \strokec12 memory\cf2 \strokec2  errorMessage\cf7 \strokec7 )\cf2 \strokec2  \cf8 \strokec8 internal\cf2 \strokec2  \cf8 \strokec8 pure\cf2 \strokec2  \cf11 \strokec11 returns\cf2 \strokec2  \cf7 \strokec7 (\cf5 \strokec5 uint256\cf7 \strokec7 )\cf2 \strokec2  \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4         \cf9 \strokec9 require\cf7 \strokec7 (\cf2 \strokec2 b \cf7 \strokec7 !=\cf2 \strokec2  \cf6 \strokec6 0\cf7 \strokec7 ,\cf2 \strokec2  errorMessage\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4         \cf11 \strokec11 return\cf2 \strokec2  a \cf7 \strokec7 %\cf2 \strokec2  b\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\cb4     \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf7 \cb4 \strokec7 \}\cf2 \cb1 \strokec2 \
\
\
\
\
\pard\pardeftab720\sl360\partightenfactor0
\cf3 \cb4 \strokec3 // pragma solidity >=0.6.2 <0.8.0; \cf2 \cb1 \strokec2 \
\
\cf3 \cb4 \strokec3 /**\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3  * @dev Collection of functions related to the address type\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3  */\cf2 \cb1 \strokec2 \
\
\
\pard\pardeftab720\sl360\partightenfactor0
\cf5 \cb4 \strokec5 library\cf2 \strokec2  Address \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb4     \cf3 \strokec3 /**\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf3 \cb4 \strokec3      * @dev Returns true if `account` is a contract.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      *\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * [IMPORTANT]\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * ====\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * It is unsafe to assume that an address for which this function returns\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * false is an externally-owned account (EOA) and not a contract.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      *\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * Among others, `isContract` will return false for the following\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * types of addresses:\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      *\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      *  - an externally-owned account\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      *  - a contract in construction\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      *  - an address where a contract will be created\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      *  - an address where a contract lived, but was destroyed\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * ====\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      */\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb4     \cf5 \strokec5 function\cf2 \strokec2  isContract\cf7 \strokec7 (\cf5 \strokec5 address\cf2 \strokec2  account\cf7 \strokec7 )\cf2 \strokec2  \cf8 \strokec8 internal\cf2 \strokec2  \cf8 \strokec8 view\cf2 \strokec2  \cf11 \strokec11 returns\cf2 \strokec2  \cf7 \strokec7 (\cf5 \strokec5 bool\cf7 \strokec7 )\cf2 \strokec2  \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4         \cf3 \strokec3 // This method relies on extcodesize, which returns 0 for contracts in\cf2 \cb1 \strokec2 \
\cb4         \cf3 \strokec3 // construction, since the code is only stored at the end of the\cf2 \cb1 \strokec2 \
\cb4         \cf3 \strokec3 // constructor execution.\cf2 \cb1 \strokec2 \
\
\cb4         \cf5 \strokec5 uint256\cf2 \strokec2  size\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\cb4         \cf3 \strokec3 // solhint-disable-next-line no-inline-assembly\cf2 \cb1 \strokec2 \
\cb4         assembly \cf7 \strokec7 \{\cf2 \strokec2  size := extcodesize\cf7 \strokec7 (\cf2 \strokec2 account\cf7 \strokec7 )\cf2 \strokec2  \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\cb4         \cf11 \strokec11 return\cf2 \strokec2  size \cf7 \strokec7 >\cf2 \strokec2  \cf6 \strokec6 0\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\cb4     \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\
\cb4     \cf3 \strokec3 /**\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf3 \cb4 \strokec3      * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * `recipient`, forwarding all available gas and reverting on errors.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      *\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * of certain opcodes, possibly making contracts go over the 2300 gas limit\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * imposed by `transfer`, making them unable to receive funds via\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * `transfer`. \{sendValue\} removes this limitation.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      *\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      *\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * IMPORTANT: because control is transferred to `recipient`, care must be\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * taken to not create reentrancy vulnerabilities. Consider using\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * \{ReentrancyGuard\} or the\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      */\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb4     \cf5 \strokec5 function\cf2 \strokec2  sendValue\cf7 \strokec7 (\cf5 \strokec5 address\cf2 \strokec2  \cf8 \strokec8 payable\cf2 \strokec2  recipient\cf7 \strokec7 ,\cf2 \strokec2  \cf5 \strokec5 uint256\cf2 \strokec2  amount\cf7 \strokec7 )\cf2 \strokec2  \cf8 \strokec8 internal\cf2 \strokec2  \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4         \cf9 \strokec9 require\cf7 \strokec7 (\cf5 \strokec5 address\cf7 \strokec7 (\cf10 \strokec10 this\cf7 \strokec7 ).\cf2 \strokec2 balance \cf7 \strokec7 >=\cf2 \strokec2  amount\cf7 \strokec7 ,\cf2 \strokec2  \cf15 \strokec15 "Address: insufficient balance"\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\
\cb4         \cf3 \strokec3 // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\cf2 \cb1 \strokec2 \
\cb4         \cf7 \strokec7 (\cf5 \strokec5 bool\cf2 \strokec2  success\cf7 \strokec7 ,\cf2 \strokec2  \cf7 \strokec7 )\cf2 \strokec2  \cf7 \strokec7 =\cf2 \strokec2  recipient\cf7 \strokec7 .\cf2 \strokec2 call\cf7 \strokec7 \{\cf2 \strokec2  value\cf7 \strokec7 :\cf2 \strokec2  amount \cf7 \strokec7 \}(\cf15 \strokec15 ""\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4         \cf9 \strokec9 require\cf7 \strokec7 (\cf2 \strokec2 success\cf7 \strokec7 ,\cf2 \strokec2  \cf15 \strokec15 "Address: unable to send value, recipient may have reverted"\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4     \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\
\cb4     \cf3 \strokec3 /**\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf3 \cb4 \strokec3      * @dev Performs a Solidity function call using a low level `call`. A\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * plain`call` is an unsafe replacement for a function call: use this\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * function instead.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      *\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * If `target` reverts with a revert reason, it is bubbled up by this\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * function (like regular Solidity function calls).\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      *\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * Returns the raw returned data. To convert to the expected return value,\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      *\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * Requirements:\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      *\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * - `target` must be a contract.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * - calling `target` with `data` must not revert.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      *\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * _Available since v3.1._\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      */\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb4     \cf5 \strokec5 function\cf2 \strokec2  functionCall\cf7 \strokec7 (\cf5 \strokec5 address\cf2 \strokec2  target\cf7 \strokec7 ,\cf2 \strokec2  \cf9 \strokec9 bytes\cf2 \strokec2  \cf12 \strokec12 memory\cf2 \strokec2  data\cf7 \strokec7 )\cf2 \strokec2  \cf8 \strokec8 internal\cf2 \strokec2  \cf11 \strokec11 returns\cf2 \strokec2  \cf7 \strokec7 (\cf9 \strokec9 bytes\cf2 \strokec2  \cf12 \strokec12 memory\cf7 \strokec7 )\cf2 \strokec2  \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4       \cf11 \strokec11 return\cf2 \strokec2  functionCall\cf7 \strokec7 (\cf2 \strokec2 target\cf7 \strokec7 ,\cf2 \strokec2  data\cf7 \strokec7 ,\cf2 \strokec2  \cf15 \strokec15 "Address: low-level call failed"\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4     \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\
\cb4     \cf3 \strokec3 /**\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf3 \cb4 \strokec3      * @dev Same as \{xref-Address-functionCall-address-bytes-\}[`functionCall`], but with\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * `errorMessage` as a fallback revert reason when `target` reverts.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      *\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * _Available since v3.1._\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      */\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb4     \cf5 \strokec5 function\cf2 \strokec2  functionCall\cf7 \strokec7 (\cf5 \strokec5 address\cf2 \strokec2  target\cf7 \strokec7 ,\cf2 \strokec2  \cf9 \strokec9 bytes\cf2 \strokec2  \cf12 \strokec12 memory\cf2 \strokec2  data\cf7 \strokec7 ,\cf2 \strokec2  \cf5 \strokec5 string\cf2 \strokec2  \cf12 \strokec12 memory\cf2 \strokec2  errorMessage\cf7 \strokec7 )\cf2 \strokec2  \cf8 \strokec8 internal\cf2 \strokec2  \cf11 \strokec11 returns\cf2 \strokec2  \cf7 \strokec7 (\cf9 \strokec9 bytes\cf2 \strokec2  \cf12 \strokec12 memory\cf7 \strokec7 )\cf2 \strokec2  \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4         \cf11 \strokec11 return\cf2 \strokec2  functionCallWithValue\cf7 \strokec7 (\cf2 \strokec2 target\cf7 \strokec7 ,\cf2 \strokec2  data\cf7 \strokec7 ,\cf2 \strokec2  \cf6 \strokec6 0\cf7 \strokec7 ,\cf2 \strokec2  errorMessage\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4     \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\
\cb4     \cf3 \strokec3 /**\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf3 \cb4 \strokec3      * @dev Same as \{xref-Address-functionCall-address-bytes-\}[`functionCall`],\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * but also transferring `value` wei to `target`.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      *\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * Requirements:\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      *\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * - the calling contract must have an ETH balance of at least `value`.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * - the called Solidity function must be `payable`.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      *\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * _Available since v3.1._\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      */\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb4     \cf5 \strokec5 function\cf2 \strokec2  functionCallWithValue\cf7 \strokec7 (\cf5 \strokec5 address\cf2 \strokec2  target\cf7 \strokec7 ,\cf2 \strokec2  \cf9 \strokec9 bytes\cf2 \strokec2  \cf12 \strokec12 memory\cf2 \strokec2  data\cf7 \strokec7 ,\cf2 \strokec2  \cf5 \strokec5 uint256\cf2 \strokec2  value\cf7 \strokec7 )\cf2 \strokec2  \cf8 \strokec8 internal\cf2 \strokec2  \cf11 \strokec11 returns\cf2 \strokec2  \cf7 \strokec7 (\cf9 \strokec9 bytes\cf2 \strokec2  \cf12 \strokec12 memory\cf7 \strokec7 )\cf2 \strokec2  \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4         \cf11 \strokec11 return\cf2 \strokec2  functionCallWithValue\cf7 \strokec7 (\cf2 \strokec2 target\cf7 \strokec7 ,\cf2 \strokec2  data\cf7 \strokec7 ,\cf2 \strokec2  value\cf7 \strokec7 ,\cf2 \strokec2  \cf15 \strokec15 "Address: low-level call with value failed"\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4     \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\
\cb4     \cf3 \strokec3 /**\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf3 \cb4 \strokec3      * @dev Same as \{xref-Address-functionCallWithValue-address-bytes-uint256-\}[`functionCallWithValue`], but\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * with `errorMessage` as a fallback revert reason when `target` reverts.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      *\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * _Available since v3.1._\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      */\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb4     \cf5 \strokec5 function\cf2 \strokec2  functionCallWithValue\cf7 \strokec7 (\cf5 \strokec5 address\cf2 \strokec2  target\cf7 \strokec7 ,\cf2 \strokec2  \cf9 \strokec9 bytes\cf2 \strokec2  \cf12 \strokec12 memory\cf2 \strokec2  data\cf7 \strokec7 ,\cf2 \strokec2  \cf5 \strokec5 uint256\cf2 \strokec2  value\cf7 \strokec7 ,\cf2 \strokec2  \cf5 \strokec5 string\cf2 \strokec2  \cf12 \strokec12 memory\cf2 \strokec2  errorMessage\cf7 \strokec7 )\cf2 \strokec2  \cf8 \strokec8 internal\cf2 \strokec2  \cf11 \strokec11 returns\cf2 \strokec2  \cf7 \strokec7 (\cf9 \strokec9 bytes\cf2 \strokec2  \cf12 \strokec12 memory\cf7 \strokec7 )\cf2 \strokec2  \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4         \cf9 \strokec9 require\cf7 \strokec7 (\cf5 \strokec5 address\cf7 \strokec7 (\cf10 \strokec10 this\cf7 \strokec7 ).\cf2 \strokec2 balance \cf7 \strokec7 >=\cf2 \strokec2  value\cf7 \strokec7 ,\cf2 \strokec2  \cf15 \strokec15 "Address: insufficient balance for call"\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4         \cf9 \strokec9 require\cf7 \strokec7 (\cf2 \strokec2 isContract\cf7 \strokec7 (\cf2 \strokec2 target\cf7 \strokec7 ),\cf2 \strokec2  \cf15 \strokec15 "Address: call to non-contract"\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\
\cb4         \cf3 \strokec3 // solhint-disable-next-line avoid-low-level-calls\cf2 \cb1 \strokec2 \
\cb4         \cf7 \strokec7 (\cf5 \strokec5 bool\cf2 \strokec2  success\cf7 \strokec7 ,\cf2 \strokec2  \cf9 \strokec9 bytes\cf2 \strokec2  \cf12 \strokec12 memory\cf2 \strokec2  returndata\cf7 \strokec7 )\cf2 \strokec2  \cf7 \strokec7 =\cf2 \strokec2  target\cf7 \strokec7 .\cf2 \strokec2 call\cf7 \strokec7 \{\cf2 \strokec2  value\cf7 \strokec7 :\cf2 \strokec2  value \cf7 \strokec7 \}(\cf2 \strokec2 data\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4         \cf11 \strokec11 return\cf2 \strokec2  _verifyCallResult\cf7 \strokec7 (\cf2 \strokec2 success\cf7 \strokec7 ,\cf2 \strokec2  returndata\cf7 \strokec7 ,\cf2 \strokec2  errorMessage\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4     \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\
\cb4     \cf3 \strokec3 /**\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf3 \cb4 \strokec3      * @dev Same as \{xref-Address-functionCall-address-bytes-\}[`functionCall`],\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * but performing a static call.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      *\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * _Available since v3.3._\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      */\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb4     \cf5 \strokec5 function\cf2 \strokec2  functionStaticCall\cf7 \strokec7 (\cf5 \strokec5 address\cf2 \strokec2  target\cf7 \strokec7 ,\cf2 \strokec2  \cf9 \strokec9 bytes\cf2 \strokec2  \cf12 \strokec12 memory\cf2 \strokec2  data\cf7 \strokec7 )\cf2 \strokec2  \cf8 \strokec8 internal\cf2 \strokec2  \cf8 \strokec8 view\cf2 \strokec2  \cf11 \strokec11 returns\cf2 \strokec2  \cf7 \strokec7 (\cf9 \strokec9 bytes\cf2 \strokec2  \cf12 \strokec12 memory\cf7 \strokec7 )\cf2 \strokec2  \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4         \cf11 \strokec11 return\cf2 \strokec2  functionStaticCall\cf7 \strokec7 (\cf2 \strokec2 target\cf7 \strokec7 ,\cf2 \strokec2  data\cf7 \strokec7 ,\cf2 \strokec2  \cf15 \strokec15 "Address: low-level static call failed"\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4     \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\
\cb4     \cf3 \strokec3 /**\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf3 \cb4 \strokec3      * @dev Same as \{xref-Address-functionCall-address-bytes-string-\}[`functionCall`],\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * but performing a static call.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      *\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * _Available since v3.3._\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      */\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb4     \cf5 \strokec5 function\cf2 \strokec2  functionStaticCall\cf7 \strokec7 (\cf5 \strokec5 address\cf2 \strokec2  target\cf7 \strokec7 ,\cf2 \strokec2  \cf9 \strokec9 bytes\cf2 \strokec2  \cf12 \strokec12 memory\cf2 \strokec2  data\cf7 \strokec7 ,\cf2 \strokec2  \cf5 \strokec5 string\cf2 \strokec2  \cf12 \strokec12 memory\cf2 \strokec2  errorMessage\cf7 \strokec7 )\cf2 \strokec2  \cf8 \strokec8 internal\cf2 \strokec2  \cf8 \strokec8 view\cf2 \strokec2  \cf11 \strokec11 returns\cf2 \strokec2  \cf7 \strokec7 (\cf9 \strokec9 bytes\cf2 \strokec2  \cf12 \strokec12 memory\cf7 \strokec7 )\cf2 \strokec2  \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4         \cf9 \strokec9 require\cf7 \strokec7 (\cf2 \strokec2 isContract\cf7 \strokec7 (\cf2 \strokec2 target\cf7 \strokec7 ),\cf2 \strokec2  \cf15 \strokec15 "Address: static call to non-contract"\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\
\cb4         \cf3 \strokec3 // solhint-disable-next-line avoid-low-level-calls\cf2 \cb1 \strokec2 \
\cb4         \cf7 \strokec7 (\cf5 \strokec5 bool\cf2 \strokec2  success\cf7 \strokec7 ,\cf2 \strokec2  \cf9 \strokec9 bytes\cf2 \strokec2  \cf12 \strokec12 memory\cf2 \strokec2  returndata\cf7 \strokec7 )\cf2 \strokec2  \cf7 \strokec7 =\cf2 \strokec2  target\cf7 \strokec7 .\cf2 \strokec2 staticcall\cf7 \strokec7 (\cf2 \strokec2 data\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4         \cf11 \strokec11 return\cf2 \strokec2  _verifyCallResult\cf7 \strokec7 (\cf2 \strokec2 success\cf7 \strokec7 ,\cf2 \strokec2  returndata\cf7 \strokec7 ,\cf2 \strokec2  errorMessage\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4     \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\
\cb4     \cf5 \strokec5 function\cf2 \strokec2  _verifyCallResult\cf7 \strokec7 (\cf5 \strokec5 bool\cf2 \strokec2  success\cf7 \strokec7 ,\cf2 \strokec2  \cf9 \strokec9 bytes\cf2 \strokec2  \cf12 \strokec12 memory\cf2 \strokec2  returndata\cf7 \strokec7 ,\cf2 \strokec2  \cf5 \strokec5 string\cf2 \strokec2  \cf12 \strokec12 memory\cf2 \strokec2  errorMessage\cf7 \strokec7 )\cf2 \strokec2  \cf8 \strokec8 private\cf2 \strokec2  \cf8 \strokec8 pure\cf2 \strokec2  \cf11 \strokec11 returns\cf7 \strokec7 (\cf9 \strokec9 bytes\cf2 \strokec2  \cf12 \strokec12 memory\cf7 \strokec7 )\cf2 \strokec2  \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4         \cf13 \strokec13 if\cf2 \strokec2  \cf7 \strokec7 (\cf2 \strokec2 success\cf7 \strokec7 )\cf2 \strokec2  \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4             \cf11 \strokec11 return\cf2 \strokec2  returndata\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\cb4         \cf7 \strokec7 \}\cf2 \strokec2  \cf13 \strokec13 else\cf2 \strokec2  \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4             \cf3 \strokec3 // Look for revert reason and bubble it up if present\cf2 \cb1 \strokec2 \
\cb4             \cf13 \strokec13 if\cf2 \strokec2  \cf7 \strokec7 (\cf2 \strokec2 returndata\cf7 \strokec7 .\cf2 \strokec2 length \cf7 \strokec7 >\cf2 \strokec2  \cf6 \strokec6 0\cf7 \strokec7 )\cf2 \strokec2  \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4                 \cf3 \strokec3 // The easiest way to bubble the revert reason is using memory via assembly\cf2 \cb1 \strokec2 \
\
\cb4                 \cf3 \strokec3 // solhint-disable-next-line no-inline-assembly\cf2 \cb1 \strokec2 \
\cb4                 assembly \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4                     \cf5 \strokec5 let\cf2 \strokec2  returndata_size := mload\cf7 \strokec7 (\cf2 \strokec2 returndata\cf7 \strokec7 )\cf2 \cb1 \strokec2 \
\cb4                     \cf9 \strokec9 revert\cf7 \strokec7 (\cf2 \strokec2 add\cf7 \strokec7 (\cf6 \strokec6 32\cf7 \strokec7 ,\cf2 \strokec2  returndata\cf7 \strokec7 ),\cf2 \strokec2  returndata_size\cf7 \strokec7 )\cf2 \cb1 \strokec2 \
\cb4                 \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\cb4             \cf7 \strokec7 \}\cf2 \strokec2  \cf13 \strokec13 else\cf2 \strokec2  \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4                 \cf9 \strokec9 revert\cf7 \strokec7 (\cf2 \strokec2 errorMessage\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4             \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\cb4         \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\cb4     \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf7 \cb4 \strokec7 \}\cf2 \cb1 \strokec2 \
\
\
\
\
\
\pard\pardeftab720\sl360\partightenfactor0
\cf3 \cb4 \strokec3 // pragma solidity >=0.6.0 <0.8.0;\cf2 \cb1 \strokec2 \
\
\cf3 \cb4 \strokec3 /**\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3  * @title SafeBEP20\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3  * @dev Wrappers around BEP20 operations that throw on failure (when the token\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3  * contract returns false). Tokens that return no value (and instead revert or\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3  * throw on failure) are also supported, non-reverting calls are assumed to be\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3  * successful.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3  * To use this library you can add a `using SafeBEP20 for IBEP20;` statement to your contract,\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3  * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3  */\cf2 \cb1 \strokec2 \
\
\
\pard\pardeftab720\sl360\partightenfactor0
\cf5 \cb4 \strokec5 library\cf2 \strokec2  SafeBEP20 \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb4     \cf5 \strokec5 using\cf2 \strokec2  SafeMath \cf16 \strokec16 for\cf2 \strokec2  \cf5 \strokec5 uint256\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\cb4     \cf5 \strokec5 using\cf2 \strokec2  Address \cf16 \strokec16 for\cf2 \strokec2  \cf5 \strokec5 address\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\
\cb4     \cf5 \strokec5 function\cf2 \strokec2  safeTransfer\cf7 \strokec7 (\cf2 \strokec2 IBEP20 token\cf7 \strokec7 ,\cf2 \strokec2  \cf5 \strokec5 address\cf2 \strokec2  to\cf7 \strokec7 ,\cf2 \strokec2  \cf5 \strokec5 uint256\cf2 \strokec2  value\cf7 \strokec7 )\cf2 \strokec2  \cf8 \strokec8 internal\cf2 \strokec2  \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4         _callOptionalReturn\cf7 \strokec7 (\cf2 \strokec2 token\cf7 \strokec7 ,\cf2 \strokec2  \cf9 \strokec9 abi\cf7 \strokec7 .\cf2 \strokec2 encodeWithSelector\cf7 \strokec7 (\cf2 \strokec2 token\cf7 \strokec7 .\cf2 \strokec2 transfer\cf7 \strokec7 .\cf2 \strokec2 selector\cf7 \strokec7 ,\cf2 \strokec2  to\cf7 \strokec7 ,\cf2 \strokec2  value\cf7 \strokec7 ));\cf2 \cb1 \strokec2 \
\cb4     \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\
\cb4     \cf5 \strokec5 function\cf2 \strokec2  safeTransferFrom\cf7 \strokec7 (\cf2 \strokec2 IBEP20 token\cf7 \strokec7 ,\cf2 \strokec2  \cf5 \strokec5 address\cf2 \strokec2  from\cf7 \strokec7 ,\cf2 \strokec2  \cf5 \strokec5 address\cf2 \strokec2  to\cf7 \strokec7 ,\cf2 \strokec2  \cf5 \strokec5 uint256\cf2 \strokec2  value\cf7 \strokec7 )\cf2 \strokec2  \cf8 \strokec8 internal\cf2 \strokec2  \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4         _callOptionalReturn\cf7 \strokec7 (\cf2 \strokec2 token\cf7 \strokec7 ,\cf2 \strokec2  \cf9 \strokec9 abi\cf7 \strokec7 .\cf2 \strokec2 encodeWithSelector\cf7 \strokec7 (\cf2 \strokec2 token\cf7 \strokec7 .\cf2 \strokec2 transferFrom\cf7 \strokec7 .\cf2 \strokec2 selector\cf7 \strokec7 ,\cf2 \strokec2  from\cf7 \strokec7 ,\cf2 \strokec2  to\cf7 \strokec7 ,\cf2 \strokec2  value\cf7 \strokec7 ));\cf2 \cb1 \strokec2 \
\cb4     \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\
\cb4     \cf3 \strokec3 /**\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf3 \cb4 \strokec3      * @dev Deprecated. This function has issues similar to the ones found in\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * \{IBEP20-approve\}, and its usage is discouraged.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      *\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * Whenever possible, use \{safeIncreaseAllowance\} and\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * \{safeDecreaseAllowance\} instead.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      */\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb4     \cf5 \strokec5 function\cf2 \strokec2  safeApprove\cf7 \strokec7 (\cf2 \strokec2 IBEP20 token\cf7 \strokec7 ,\cf2 \strokec2  \cf5 \strokec5 address\cf2 \strokec2  spender\cf7 \strokec7 ,\cf2 \strokec2  \cf5 \strokec5 uint256\cf2 \strokec2  value\cf7 \strokec7 )\cf2 \strokec2  \cf8 \strokec8 internal\cf2 \strokec2  \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4         \cf3 \strokec3 // safeApprove should only be called when setting an initial allowance,\cf2 \cb1 \strokec2 \
\cb4         \cf3 \strokec3 // or when resetting it to zero. To increase and decrease it, use\cf2 \cb1 \strokec2 \
\cb4         \cf3 \strokec3 // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\cf2 \cb1 \strokec2 \
\cb4         \cf3 \strokec3 // solhint-disable-next-line max-line-length\cf2 \cb1 \strokec2 \
\cb4         \cf9 \strokec9 require\cf7 \strokec7 ((\cf2 \strokec2 value \cf7 \strokec7 ==\cf2 \strokec2  \cf6 \strokec6 0\cf7 \strokec7 )\cf2 \strokec2  \cf7 \strokec7 ||\cf2 \strokec2  \cf7 \strokec7 (\cf2 \strokec2 token\cf7 \strokec7 .\cf2 \strokec2 allowance\cf7 \strokec7 (\cf5 \strokec5 address\cf7 \strokec7 (\cf10 \strokec10 this\cf7 \strokec7 ),\cf2 \strokec2  spender\cf7 \strokec7 )\cf2 \strokec2  \cf7 \strokec7 ==\cf2 \strokec2  \cf6 \strokec6 0\cf7 \strokec7 ),\cf2 \cb1 \strokec2 \
\cb4             \cf15 \strokec15 "SafeBEP20: approve from non-zero to non-zero allowance"\cf2 \cb1 \strokec2 \
\cb4         \cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4         _callOptionalReturn\cf7 \strokec7 (\cf2 \strokec2 token\cf7 \strokec7 ,\cf2 \strokec2  \cf9 \strokec9 abi\cf7 \strokec7 .\cf2 \strokec2 encodeWithSelector\cf7 \strokec7 (\cf2 \strokec2 token\cf7 \strokec7 .\cf2 \strokec2 approve\cf7 \strokec7 .\cf2 \strokec2 selector\cf7 \strokec7 ,\cf2 \strokec2  spender\cf7 \strokec7 ,\cf2 \strokec2  value\cf7 \strokec7 ));\cf2 \cb1 \strokec2 \
\cb4     \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\
\cb4     \cf5 \strokec5 function\cf2 \strokec2  safeIncreaseAllowance\cf7 \strokec7 (\cf2 \strokec2 IBEP20 token\cf7 \strokec7 ,\cf2 \strokec2  \cf5 \strokec5 address\cf2 \strokec2  spender\cf7 \strokec7 ,\cf2 \strokec2  \cf5 \strokec5 uint256\cf2 \strokec2  value\cf7 \strokec7 )\cf2 \strokec2  \cf8 \strokec8 internal\cf2 \strokec2  \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4         \cf5 \strokec5 uint256\cf2 \strokec2  newAllowance \cf7 \strokec7 =\cf2 \strokec2  token\cf7 \strokec7 .\cf2 \strokec2 allowance\cf7 \strokec7 (\cf5 \strokec5 address\cf7 \strokec7 (\cf10 \strokec10 this\cf7 \strokec7 ),\cf2 \strokec2  spender\cf7 \strokec7 ).\cf2 \strokec2 add\cf7 \strokec7 (\cf2 \strokec2 value\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4         _callOptionalReturn\cf7 \strokec7 (\cf2 \strokec2 token\cf7 \strokec7 ,\cf2 \strokec2  \cf9 \strokec9 abi\cf7 \strokec7 .\cf2 \strokec2 encodeWithSelector\cf7 \strokec7 (\cf2 \strokec2 token\cf7 \strokec7 .\cf2 \strokec2 approve\cf7 \strokec7 .\cf2 \strokec2 selector\cf7 \strokec7 ,\cf2 \strokec2  spender\cf7 \strokec7 ,\cf2 \strokec2  newAllowance\cf7 \strokec7 ));\cf2 \cb1 \strokec2 \
\cb4     \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\
\cb4     \cf5 \strokec5 function\cf2 \strokec2  safeDecreaseAllowance\cf7 \strokec7 (\cf2 \strokec2 IBEP20 token\cf7 \strokec7 ,\cf2 \strokec2  \cf5 \strokec5 address\cf2 \strokec2  spender\cf7 \strokec7 ,\cf2 \strokec2  \cf5 \strokec5 uint256\cf2 \strokec2  value\cf7 \strokec7 )\cf2 \strokec2  \cf8 \strokec8 internal\cf2 \strokec2  \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4         \cf5 \strokec5 uint256\cf2 \strokec2  newAllowance \cf7 \strokec7 =\cf2 \strokec2  token\cf7 \strokec7 .\cf2 \strokec2 allowance\cf7 \strokec7 (\cf5 \strokec5 address\cf7 \strokec7 (\cf10 \strokec10 this\cf7 \strokec7 ),\cf2 \strokec2  spender\cf7 \strokec7 ).\cf2 \strokec2 sub\cf7 \strokec7 (\cf2 \strokec2 value\cf7 \strokec7 ,\cf2 \strokec2  \cf15 \strokec15 "SafeBEP20: decreased allowance below zero"\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4         _callOptionalReturn\cf7 \strokec7 (\cf2 \strokec2 token\cf7 \strokec7 ,\cf2 \strokec2  \cf9 \strokec9 abi\cf7 \strokec7 .\cf2 \strokec2 encodeWithSelector\cf7 \strokec7 (\cf2 \strokec2 token\cf7 \strokec7 .\cf2 \strokec2 approve\cf7 \strokec7 .\cf2 \strokec2 selector\cf7 \strokec7 ,\cf2 \strokec2  spender\cf7 \strokec7 ,\cf2 \strokec2  newAllowance\cf7 \strokec7 ));\cf2 \cb1 \strokec2 \
\cb4     \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\
\cb4     \cf3 \strokec3 /**\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf3 \cb4 \strokec3      * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * on the return value: the return value is optional (but if data is returned, it must not be false).\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * @param token The token targeted by the call.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * @param data The call data (encoded using abi.encode or one of its variants).\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      */\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb4     \cf5 \strokec5 function\cf2 \strokec2  _callOptionalReturn\cf7 \strokec7 (\cf2 \strokec2 IBEP20 token\cf7 \strokec7 ,\cf2 \strokec2  \cf9 \strokec9 bytes\cf2 \strokec2  \cf12 \strokec12 memory\cf2 \strokec2  data\cf7 \strokec7 )\cf2 \strokec2  \cf8 \strokec8 private\cf2 \strokec2  \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4         \cf3 \strokec3 // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\cf2 \cb1 \strokec2 \
\cb4         \cf3 \strokec3 // we're implementing it ourselves. We use \{Address.functionCall\} to perform this call, which verifies that\cf2 \cb1 \strokec2 \
\cb4         \cf3 \strokec3 // the target address contains contract code and also asserts for success in the low-level call.\cf2 \cb1 \strokec2 \
\
\cb4         \cf9 \strokec9 bytes\cf2 \strokec2  \cf12 \strokec12 memory\cf2 \strokec2  returndata \cf7 \strokec7 =\cf2 \strokec2  \cf5 \strokec5 address\cf7 \strokec7 (\cf2 \strokec2 token\cf7 \strokec7 ).\cf2 \strokec2 functionCall\cf7 \strokec7 (\cf2 \strokec2 data\cf7 \strokec7 ,\cf2 \strokec2  \cf15 \strokec15 "SafeBEP20: low-level call failed"\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4         \cf13 \strokec13 if\cf2 \strokec2  \cf7 \strokec7 (\cf2 \strokec2 returndata\cf7 \strokec7 .\cf2 \strokec2 length \cf7 \strokec7 >\cf2 \strokec2  \cf6 \strokec6 0\cf7 \strokec7 )\cf2 \strokec2  \cf7 \strokec7 \{\cf2 \strokec2  \cf3 \strokec3 // Return data is optional\cf2 \cb1 \strokec2 \
\cb4             \cf3 \strokec3 // solhint-disable-next-line max-line-length\cf2 \cb1 \strokec2 \
\cb4             \cf9 \strokec9 require\cf7 \strokec7 (\cf9 \strokec9 abi\cf7 \strokec7 .\cf2 \strokec2 decode\cf7 \strokec7 (\cf2 \strokec2 returndata\cf7 \strokec7 ,\cf2 \strokec2  \cf7 \strokec7 (\cf5 \strokec5 bool\cf7 \strokec7 )),\cf2 \strokec2  \cf15 \strokec15 "SafeBEP20: BEP20 operation did not succeed"\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4         \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\cb4     \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf7 \cb4 \strokec7 \}\cf2 \cb1 \strokec2 \
\
\
\
\
\pard\pardeftab720\sl360\partightenfactor0
\cf3 \cb4 \strokec3 // pragma solidity >=0.4.0;\cf2 \cb1 \strokec2 \
\
\cf3 \cb4 \strokec3 /**\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3  * @dev Implementation of the \{IBEP20\} interface.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3  *\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3  * This implementation is agnostic to the way tokens are created. This means\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3  * that a supply mechanism has to be added in a derived contract using \{_mint\}.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3  * For a generic mechanism see \{BEP20PresetMinterPauser\}.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3  *\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3  * TIP: For a detailed writeup see our guide\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3  * https://forum.zeppelin.solutions/t/how-to-implement-BEP20-supply-mechanisms/226[How\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3  * to implement supply mechanisms].\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3  *\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3  * We have followed general OpenZeppelin guidelines: functions revert instead\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3  * of returning `false` on failure. This behavior is nonetheless conventional\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3  * and does not conflict with the expectations of BEP20 applications.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3  *\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3  * Additionally, an \{Approval\} event is emitted on calls to \{transferFrom\}.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3  * This allows applications to reconstruct the allowance for all accounts just\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3  * by listening to said events. Other implementations of the EIP may not emit\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3  * these events, as it isn't required by the specification.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3  *\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3  * Finally, the non-standard \{decreaseAllowance\} and \{increaseAllowance\}\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3  * functions have been added to mitigate the well-known issues around setting\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3  * allowances. See \{IBEP20-approve\}.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3  */\cf2 \cb1 \strokec2 \
\
\
\pard\pardeftab720\sl360\partightenfactor0
\cf5 \cb4 \strokec5 contract\cf2 \strokec2  BEP20 \cf5 \strokec5 is\cf2 \strokec2  Context\cf7 \strokec7 ,\cf2 \strokec2  IBEP20\cf7 \strokec7 ,\cf2 \strokec2  Ownable \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb4     \cf5 \strokec5 using\cf2 \strokec2  SafeMath \cf16 \strokec16 for\cf2 \strokec2  \cf5 \strokec5 uint256\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\
\cb4     \cf5 \strokec5 mapping\cf7 \strokec7 (\cf5 \strokec5 address\cf2 \strokec2  => \cf5 \strokec5 uint256\cf7 \strokec7 )\cf2 \strokec2  \cf8 \strokec8 private\cf2 \strokec2  _balances\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\
\cb4     \cf5 \strokec5 mapping\cf7 \strokec7 (\cf5 \strokec5 address\cf2 \strokec2  => \cf5 \strokec5 mapping\cf7 \strokec7 (\cf5 \strokec5 address\cf2 \strokec2  => \cf5 \strokec5 uint256\cf7 \strokec7 ))\cf2 \strokec2  \cf8 \strokec8 private\cf2 \strokec2  _allowances\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\
\cb4     \cf5 \strokec5 uint256\cf2 \strokec2  \cf8 \strokec8 private\cf2 \strokec2  _totalSupply\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\cb4     \cf5 \strokec5 uint256\cf2 \strokec2  \cf8 \strokec8 private\cf2 \strokec2  _maxSupply\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\
\cb4     \cf5 \strokec5 string\cf2 \strokec2  \cf8 \strokec8 private\cf2 \strokec2  _name\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\cb4     \cf5 \strokec5 string\cf2 \strokec2  \cf8 \strokec8 private\cf2 \strokec2  _symbol\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\cb4     \cf5 \strokec5 uint8\cf2 \strokec2  \cf8 \strokec8 private\cf2 \strokec2  _decimals\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\
\cb4     \cf3 \strokec3 /**\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf3 \cb4 \strokec3      * @dev Sets the values for \{name\} and \{symbol\}, initializes \{decimals\} with\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * a default value of 18.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      *\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * To select a different value for \{decimals\}, use \{_setupDecimals\}.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      *\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * All three of these values are immutable: they can only be set once during\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * construction.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      */\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb4     \cf14 \strokec14 constructor\cf7 \strokec7 (\cf5 \strokec5 string\cf2 \strokec2  \cf12 \strokec12 memory\cf2 \strokec2  name\cf7 \strokec7 ,\cf2 \strokec2  \cf5 \strokec5 string\cf2 \strokec2  \cf12 \strokec12 memory\cf2 \strokec2  symbol\cf7 \strokec7 )\cf2 \strokec2  \cf8 \strokec8 public\cf2 \strokec2  \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4         _name \cf7 \strokec7 =\cf2 \strokec2  name\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\cb4         _symbol \cf7 \strokec7 =\cf2 \strokec2  symbol\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\cb4         _decimals \cf7 \strokec7 =\cf2 \strokec2  \cf6 \strokec6 18\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\cb4         _maxSupply \cf7 \strokec7 =\cf2 \strokec2  \cf6 \strokec6 90000\cf2 \strokec2  \cf7 \strokec7 *\cf2 \strokec2  \cf7 \strokec7 (\cf6 \strokec6 10\cf2 \strokec2  ** \cf6 \strokec6 18\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4     \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\
\cb4     \cf3 \strokec3 /**\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf3 \cb4 \strokec3      * @dev Returns the bep token owner.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      */\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb4     \cf5 \strokec5 function\cf2 \strokec2  getOwner\cf7 \strokec7 ()\cf2 \strokec2  \cf8 \strokec8 external\cf2 \strokec2  \cf17 \strokec17 override\cf2 \strokec2  \cf8 \strokec8 view\cf2 \strokec2  \cf11 \strokec11 returns\cf2 \strokec2  \cf7 \strokec7 (\cf5 \strokec5 address\cf7 \strokec7 )\cf2 \strokec2  \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4         \cf11 \strokec11 return\cf2 \strokec2  owner\cf7 \strokec7 ();\cf2 \cb1 \strokec2 \
\cb4     \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\
\cb4     \cf3 \strokec3 /**\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf3 \cb4 \strokec3      * @dev Returns the name of the token.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      */\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb4     \cf5 \strokec5 function\cf2 \strokec2  name\cf7 \strokec7 ()\cf2 \strokec2  \cf8 \strokec8 public\cf2 \strokec2  \cf17 \strokec17 override\cf2 \strokec2  \cf8 \strokec8 view\cf2 \strokec2  \cf11 \strokec11 returns\cf2 \strokec2  \cf7 \strokec7 (\cf5 \strokec5 string\cf2 \strokec2  \cf12 \strokec12 memory\cf7 \strokec7 )\cf2 \strokec2  \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4         \cf11 \strokec11 return\cf2 \strokec2  _name\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\cb4     \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\
\cb4     \cf3 \strokec3 /**\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf3 \cb4 \strokec3      * @dev Returns the symbol of the token, usually a shorter version of the\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * name.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      */\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb4     \cf5 \strokec5 function\cf2 \strokec2  symbol\cf7 \strokec7 ()\cf2 \strokec2  \cf8 \strokec8 public\cf2 \strokec2  \cf17 \strokec17 override\cf2 \strokec2  \cf8 \strokec8 view\cf2 \strokec2  \cf11 \strokec11 returns\cf2 \strokec2  \cf7 \strokec7 (\cf5 \strokec5 string\cf2 \strokec2  \cf12 \strokec12 memory\cf7 \strokec7 )\cf2 \strokec2  \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4         \cf11 \strokec11 return\cf2 \strokec2  _symbol\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\cb4     \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\
\cb4     \cf3 \strokec3 /**\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf3 \cb4 \strokec3     * @dev Returns the number of decimals used to get its user representation.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3     */\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb4     \cf5 \strokec5 function\cf2 \strokec2  decimals\cf7 \strokec7 ()\cf2 \strokec2  \cf8 \strokec8 public\cf2 \strokec2  \cf17 \strokec17 override\cf2 \strokec2  \cf8 \strokec8 view\cf2 \strokec2  \cf11 \strokec11 returns\cf2 \strokec2  \cf7 \strokec7 (\cf5 \strokec5 uint8\cf7 \strokec7 )\cf2 \strokec2  \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4         \cf11 \strokec11 return\cf2 \strokec2  _decimals\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\cb4     \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\
\cb4     \cf3 \strokec3 /**\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf3 \cb4 \strokec3      * @dev See \{BEP20-totalSupply\}.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      */\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb4     \cf5 \strokec5 function\cf2 \strokec2  totalSupply\cf7 \strokec7 ()\cf2 \strokec2  \cf8 \strokec8 public\cf2 \strokec2  \cf17 \strokec17 override\cf2 \strokec2  \cf8 \strokec8 view\cf2 \strokec2  \cf11 \strokec11 returns\cf2 \strokec2  \cf7 \strokec7 (\cf5 \strokec5 uint256\cf7 \strokec7 )\cf2 \strokec2  \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4         \cf11 \strokec11 return\cf2 \strokec2  _totalSupply\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\cb4     \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\
\cb4     \cf3 \strokec3 /**\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf3 \cb4 \strokec3      * @dev See \{BEP20-maxSupply\}.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      */\cf2 \cb1 \strokec2 \
\
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb4     \cf5 \strokec5 function\cf2 \strokec2  maxSupply\cf7 \strokec7 ()\cf2 \strokec2  \cf8 \strokec8 public\cf2 \strokec2  \cf17 \strokec17 override\cf2 \strokec2  \cf8 \strokec8 view\cf2 \strokec2  \cf11 \strokec11 returns\cf2 \strokec2  \cf7 \strokec7 (\cf5 \strokec5 uint256\cf7 \strokec7 )\cf2 \strokec2  \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4        \cf11 \strokec11 return\cf2 \strokec2  _maxSupply\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\cb4     \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\
\cb4     \cf3 \strokec3 /**\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf3 \cb4 \strokec3      * @dev See \{BEP20-balanceOf\}.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      */\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb4     \cf5 \strokec5 function\cf2 \strokec2  balanceOf\cf7 \strokec7 (\cf5 \strokec5 address\cf2 \strokec2  account\cf7 \strokec7 )\cf2 \strokec2  \cf8 \strokec8 public\cf2 \strokec2  \cf17 \strokec17 override\cf2 \strokec2  \cf8 \strokec8 view\cf2 \strokec2  \cf11 \strokec11 returns\cf2 \strokec2  \cf7 \strokec7 (\cf5 \strokec5 uint256\cf7 \strokec7 )\cf2 \strokec2  \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4         \cf11 \strokec11 return\cf2 \strokec2  _balances\cf7 \strokec7 [\cf2 \strokec2 account\cf7 \strokec7 ];\cf2 \cb1 \strokec2 \
\cb4     \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\
\cb4     \cf3 \strokec3 /**\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf3 \cb4 \strokec3      * @dev See \{BEP20-transfer\}.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      *\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * Requirements:\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      *\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * - `recipient` cannot be the zero address.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * - the caller must have a balance of at least `amount`.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      */\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb4     \cf5 \strokec5 function\cf2 \strokec2  transfer\cf7 \strokec7 (\cf5 \strokec5 address\cf2 \strokec2  recipient\cf7 \strokec7 ,\cf2 \strokec2  \cf5 \strokec5 uint256\cf2 \strokec2  amount\cf7 \strokec7 )\cf2 \strokec2  \cf8 \strokec8 public\cf2 \strokec2  \cf17 \strokec17 override\cf2 \strokec2  \cf11 \strokec11 returns\cf2 \strokec2  \cf7 \strokec7 (\cf5 \strokec5 bool\cf7 \strokec7 )\cf2 \strokec2  \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4         _transfer\cf7 \strokec7 (\cf2 \strokec2 _msgSender\cf7 \strokec7 (),\cf2 \strokec2  recipient\cf7 \strokec7 ,\cf2 \strokec2  amount\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4         \cf11 \strokec11 return\cf2 \strokec2  \cf5 \strokec5 true\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\cb4     \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\
\cb4     \cf3 \strokec3 /**\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf3 \cb4 \strokec3      * @dev See \{BEP20-allowance\}.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      */\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb4     \cf5 \strokec5 function\cf2 \strokec2  allowance\cf7 \strokec7 (\cf5 \strokec5 address\cf2 \strokec2  owner\cf7 \strokec7 ,\cf2 \strokec2  \cf5 \strokec5 address\cf2 \strokec2  spender\cf7 \strokec7 )\cf2 \strokec2  \cf8 \strokec8 public\cf2 \strokec2  \cf17 \strokec17 override\cf2 \strokec2  \cf8 \strokec8 view\cf2 \strokec2  \cf11 \strokec11 returns\cf2 \strokec2  \cf7 \strokec7 (\cf5 \strokec5 uint256\cf7 \strokec7 )\cf2 \strokec2  \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4         \cf11 \strokec11 return\cf2 \strokec2  _allowances\cf7 \strokec7 [\cf2 \strokec2 owner\cf7 \strokec7 ][\cf2 \strokec2 spender\cf7 \strokec7 ];\cf2 \cb1 \strokec2 \
\cb4     \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\
\cb4     \cf3 \strokec3 /**\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf3 \cb4 \strokec3      * @dev See \{BEP20-approve\}.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      *\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * Requirements:\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      *\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * - `spender` cannot be the zero address.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      */\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb4     \cf5 \strokec5 function\cf2 \strokec2  approve\cf7 \strokec7 (\cf5 \strokec5 address\cf2 \strokec2  spender\cf7 \strokec7 ,\cf2 \strokec2  \cf5 \strokec5 uint256\cf2 \strokec2  amount\cf7 \strokec7 )\cf2 \strokec2  \cf8 \strokec8 public\cf2 \strokec2  \cf17 \strokec17 override\cf2 \strokec2  \cf11 \strokec11 returns\cf2 \strokec2  \cf7 \strokec7 (\cf5 \strokec5 bool\cf7 \strokec7 )\cf2 \strokec2  \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4         _approve\cf7 \strokec7 (\cf2 \strokec2 _msgSender\cf7 \strokec7 (),\cf2 \strokec2  spender\cf7 \strokec7 ,\cf2 \strokec2  amount\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4         \cf11 \strokec11 return\cf2 \strokec2  \cf5 \strokec5 true\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\cb4     \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\
\cb4     \cf3 \strokec3 /**\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf3 \cb4 \strokec3      * @dev See \{BEP20-transferFrom\}.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      *\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * Emits an \{Approval\} event indicating the updated allowance. This is not\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * required by the EIP. See the note at the beginning of \{BEP20\};\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      *\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * Requirements:\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * - `sender` and `recipient` cannot be the zero address.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * - `sender` must have a balance of at least `amount`.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * - the caller must have allowance for `sender`'s tokens of at least\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * `amount`.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      */\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb4     \cf5 \strokec5 function\cf2 \strokec2  transferFrom \cf7 \strokec7 (\cf5 \strokec5 address\cf2 \strokec2  sender\cf7 \strokec7 ,\cf2 \strokec2  \cf5 \strokec5 address\cf2 \strokec2  recipient\cf7 \strokec7 ,\cf2 \strokec2  \cf5 \strokec5 uint256\cf2 \strokec2  amount\cf7 \strokec7 )\cf2 \strokec2  \cf8 \strokec8 public\cf2 \strokec2  \cf17 \strokec17 override\cf2 \strokec2  \cf11 \strokec11 returns\cf2 \strokec2  \cf7 \strokec7 (\cf5 \strokec5 bool\cf7 \strokec7 )\cf2 \strokec2  \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4         _transfer\cf7 \strokec7 (\cf2 \strokec2 sender\cf7 \strokec7 ,\cf2 \strokec2  recipient\cf7 \strokec7 ,\cf2 \strokec2  amount\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4         _approve\cf7 \strokec7 (\cf2 \cb1 \strokec2 \
\cb4             sender\cf7 \strokec7 ,\cf2 \cb1 \strokec2 \
\cb4             _msgSender\cf7 \strokec7 (),\cf2 \cb1 \strokec2 \
\cb4             _allowances\cf7 \strokec7 [\cf2 \strokec2 sender\cf7 \strokec7 ][\cf2 \strokec2 _msgSender\cf7 \strokec7 ()].\cf2 \strokec2 sub\cf7 \strokec7 (\cf2 \strokec2 amount\cf7 \strokec7 ,\cf2 \strokec2  \cf15 \strokec15 '\cf2 \strokec2 BEP20\cf7 \strokec7 :\cf2 \strokec2  transfer amount exceeds allowance\cf15 \strokec15 '\cf7 \strokec7 )\cf2 \cb1 \strokec2 \
\cb4         \cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4         \cf11 \strokec11 return\cf2 \strokec2  \cf5 \strokec5 true\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\cb4     \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\
\cb4     \cf3 \strokec3 /**\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf3 \cb4 \strokec3      * @dev Atomically increases the allowance granted to `spender` by the caller.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      *\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * This is an alternative to \{approve\} that can be used as a mitigation for\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * problems described in \{BEP20-approve\}.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      *\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * Emits an \{Approval\} event indicating the updated allowance.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      *\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * Requirements:\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      *\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * - `spender` cannot be the zero address.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      */\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb4     \cf5 \strokec5 function\cf2 \strokec2  increaseAllowance\cf7 \strokec7 (\cf5 \strokec5 address\cf2 \strokec2  spender\cf7 \strokec7 ,\cf2 \strokec2  \cf5 \strokec5 uint256\cf2 \strokec2  addedValue\cf7 \strokec7 )\cf2 \strokec2  \cf8 \strokec8 public\cf2 \strokec2  \cf11 \strokec11 returns\cf2 \strokec2  \cf7 \strokec7 (\cf5 \strokec5 bool\cf7 \strokec7 )\cf2 \strokec2  \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4         _approve\cf7 \strokec7 (\cf2 \strokec2 _msgSender\cf7 \strokec7 (),\cf2 \strokec2  spender\cf7 \strokec7 ,\cf2 \strokec2  _allowances\cf7 \strokec7 [\cf2 \strokec2 _msgSender\cf7 \strokec7 ()][\cf2 \strokec2 spender\cf7 \strokec7 ].\cf2 \strokec2 add\cf7 \strokec7 (\cf2 \strokec2 addedValue\cf7 \strokec7 ));\cf2 \cb1 \strokec2 \
\cb4         \cf11 \strokec11 return\cf2 \strokec2  \cf5 \strokec5 true\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\cb4     \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\
\cb4     \cf3 \strokec3 /**\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf3 \cb4 \strokec3      * @dev Atomically decreases the allowance granted to `spender` by the caller.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      *\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * This is an alternative to \{approve\} that can be used as a mitigation for\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * problems described in \{BEP20-approve\}.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      *\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * Emits an \{Approval\} event indicating the updated allowance.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      *\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * Requirements:\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      *\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * - `spender` cannot be the zero address.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * - `spender` must have allowance for the caller of at least\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * `subtractedValue`.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      */\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb4     \cf5 \strokec5 function\cf2 \strokec2  decreaseAllowance\cf7 \strokec7 (\cf5 \strokec5 address\cf2 \strokec2  spender\cf7 \strokec7 ,\cf2 \strokec2  \cf5 \strokec5 uint256\cf2 \strokec2  subtractedValue\cf7 \strokec7 )\cf2 \strokec2  \cf8 \strokec8 public\cf2 \strokec2  \cf11 \strokec11 returns\cf2 \strokec2  \cf7 \strokec7 (\cf5 \strokec5 bool\cf7 \strokec7 )\cf2 \strokec2  \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4         _approve\cf7 \strokec7 (\cf2 \strokec2 _msgSender\cf7 \strokec7 (),\cf2 \strokec2  spender\cf7 \strokec7 ,\cf2 \strokec2  _allowances\cf7 \strokec7 [\cf2 \strokec2 _msgSender\cf7 \strokec7 ()][\cf2 \strokec2 spender\cf7 \strokec7 ].\cf2 \strokec2 sub\cf7 \strokec7 (\cf2 \strokec2 subtractedValue\cf7 \strokec7 ,\cf2 \strokec2  \cf15 \strokec15 '\cf2 \strokec2 BEP20\cf7 \strokec7 :\cf2 \strokec2  decreased allowance below zero\cf15 \strokec15 '\cf7 \strokec7 ));\cf2 \cb1 \strokec2 \
\cb4         \cf11 \strokec11 return\cf2 \strokec2  \cf5 \strokec5 true\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\cb4     \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\
\cb4     \cf3 \strokec3 /**\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf3 \cb4 \strokec3      * @dev Creates `amount` tokens and assigns them to `msg.sender`, increasing\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * the total supply.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      *\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * Requirements\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      *\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * - `msg.sender` must be the token owner\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      */\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb4     \cf5 \strokec5 function\cf2 \strokec2  mint\cf7 \strokec7 (\cf5 \strokec5 uint256\cf2 \strokec2  amount\cf7 \strokec7 )\cf2 \strokec2  \cf8 \strokec8 public\cf2 \strokec2  onlyOwner \cf11 \strokec11 returns\cf2 \strokec2  \cf7 \strokec7 (\cf5 \strokec5 bool\cf7 \strokec7 )\cf2 \strokec2  \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4         _mint\cf7 \strokec7 (\cf2 \strokec2 _msgSender\cf7 \strokec7 (),\cf2 \strokec2  amount\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4         \cf11 \strokec11 return\cf2 \strokec2  \cf5 \strokec5 true\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\cb4     \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\
\cb4     \cf3 \strokec3 /**\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf3 \cb4 \strokec3      * @dev Moves tokens `amount` from `sender` to `recipient`.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      *\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * This is internal function is equivalent to \{transfer\}, and can be used to\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * e.g. implement automatic token fees, slashing mechanisms, etc.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      *\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * Emits a \{Transfer\} event.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      *\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * Requirements:\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      *\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * - `sender` cannot be the zero address.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * - `recipient` cannot be the zero address.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * - `sender` must have a balance of at least `amount`.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      */\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb4     \cf5 \strokec5 function\cf2 \strokec2  _transfer \cf7 \strokec7 (\cf5 \strokec5 address\cf2 \strokec2  sender\cf7 \strokec7 ,\cf2 \strokec2  \cf5 \strokec5 address\cf2 \strokec2  recipient\cf7 \strokec7 ,\cf2 \strokec2  \cf5 \strokec5 uint256\cf2 \strokec2  amount\cf7 \strokec7 )\cf2 \strokec2  \cf8 \strokec8 internal\cf2 \strokec2  \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4         \cf9 \strokec9 require\cf7 \strokec7 (\cf2 \strokec2 sender \cf7 \strokec7 !=\cf2 \strokec2  \cf5 \strokec5 address\cf7 \strokec7 (\cf6 \strokec6 0\cf7 \strokec7 ),\cf2 \strokec2  \cf15 \strokec15 '\cf2 \strokec2 BEP20\cf7 \strokec7 :\cf2 \strokec2  transfer from the zero \cf5 \strokec5 address\cf15 \strokec15 '\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4         \cf9 \strokec9 require\cf7 \strokec7 (\cf2 \strokec2 recipient \cf7 \strokec7 !=\cf2 \strokec2  \cf5 \strokec5 address\cf7 \strokec7 (\cf6 \strokec6 0\cf7 \strokec7 ),\cf2 \strokec2  \cf15 \strokec15 '\cf2 \strokec2 BEP20\cf7 \strokec7 :\cf2 \strokec2  transfer to the zero \cf5 \strokec5 address\cf15 \strokec15 '\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\
\cb4         _balances\cf7 \strokec7 [\cf2 \strokec2 sender\cf7 \strokec7 ]\cf2 \strokec2  \cf7 \strokec7 =\cf2 \strokec2  _balances\cf7 \strokec7 [\cf2 \strokec2 sender\cf7 \strokec7 ].\cf2 \strokec2 sub\cf7 \strokec7 (\cf2 \strokec2 amount\cf7 \strokec7 ,\cf2 \strokec2  \cf15 \strokec15 '\cf2 \strokec2 BEP20\cf7 \strokec7 :\cf2 \strokec2  transfer amount exceeds balance\cf15 \strokec15 '\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4         _balances\cf7 \strokec7 [\cf2 \strokec2 recipient\cf7 \strokec7 ]\cf2 \strokec2  \cf7 \strokec7 =\cf2 \strokec2  _balances\cf7 \strokec7 [\cf2 \strokec2 recipient\cf7 \strokec7 ].\cf2 \strokec2 add\cf7 \strokec7 (\cf2 \strokec2 amount\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4         \cf5 \strokec5 emit\cf2 \strokec2  Transfer\cf7 \strokec7 (\cf2 \strokec2 sender\cf7 \strokec7 ,\cf2 \strokec2  recipient\cf7 \strokec7 ,\cf2 \strokec2  amount\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4     \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\
\cb4     \cf3 \strokec3 /** @dev Creates `amount` tokens and assigns them to `account`, increasing\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf3 \cb4 \strokec3      * the total supply.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      *\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * Emits a \{Transfer\} event with `from` set to the zero address.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      *\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * Requirements\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      *\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * - `to` cannot be the zero address.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      */\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb4     \cf5 \strokec5 function\cf2 \strokec2  _mint\cf7 \strokec7 (\cf5 \strokec5 address\cf2 \strokec2  account\cf7 \strokec7 ,\cf2 \strokec2  \cf5 \strokec5 uint256\cf2 \strokec2  amount\cf7 \strokec7 )\cf2 \strokec2  \cf8 \strokec8 internal\cf2 \strokec2  \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4     \cf9 \strokec9 require\cf7 \strokec7 (\cf2 \strokec2 account \cf7 \strokec7 !=\cf2 \strokec2  \cf5 \strokec5 address\cf7 \strokec7 (\cf6 \strokec6 0\cf7 \strokec7 ),\cf2 \strokec2  \cf15 \strokec15 '\cf2 \strokec2 BEP20\cf7 \strokec7 :\cf2 \strokec2  mint to the zero \cf5 \strokec5 address\cf15 \strokec15 '\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\
\cb4     \cf9 \strokec9 require\cf7 \strokec7 (\cf2 \strokec2 _maxSupply \cf7 \strokec7 >=\cf2 \strokec2  _totalSupply\cf7 \strokec7 .\cf2 \strokec2 add\cf7 \strokec7 (\cf2 \strokec2 amount\cf7 \strokec7 ),\cf2 \strokec2  \cf15 \strokec15 "Max supply exceeds, transaction will be reverted!"\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4         _totalSupply \cf7 \strokec7 =\cf2 \strokec2  _totalSupply\cf7 \strokec7 .\cf2 \strokec2 add\cf7 \strokec7 (\cf2 \strokec2 amount\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4         _balances\cf7 \strokec7 [\cf2 \strokec2 account\cf7 \strokec7 ]\cf2 \strokec2  \cf7 \strokec7 =\cf2 \strokec2  _balances\cf7 \strokec7 [\cf2 \strokec2 account\cf7 \strokec7 ].\cf2 \strokec2 add\cf7 \strokec7 (\cf2 \strokec2 amount\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4         \cf5 \strokec5 emit\cf2 \strokec2  Transfer\cf7 \strokec7 (\cf5 \strokec5 address\cf7 \strokec7 (\cf6 \strokec6 0\cf7 \strokec7 ),\cf2 \strokec2  account\cf7 \strokec7 ,\cf2 \strokec2  amount\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4     \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\
\cb4     \cf3 \strokec3 /**\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf3 \cb4 \strokec3      * @dev Destroys `amount` tokens from `account`, reducing the\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * total supply.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      *\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * Emits a \{Transfer\} event with `to` set to the zero address.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      *\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * Requirements\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      *\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * - `account` cannot be the zero address.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * - `account` must have at least `amount` tokens.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      */\cf2 \cb1 \strokec2 \
\
\
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb4     \cf5 \strokec5 function\cf2 \strokec2  _burn\cf7 \strokec7 (\cf5 \strokec5 address\cf2 \strokec2  account\cf7 \strokec7 ,\cf2 \strokec2  \cf5 \strokec5 uint256\cf2 \strokec2  amount\cf7 \strokec7 )\cf2 \strokec2  \cf8 \strokec8 internal\cf2 \strokec2  \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4         \cf9 \strokec9 require\cf7 \strokec7 (\cf2 \strokec2 account \cf7 \strokec7 !=\cf2 \strokec2  \cf5 \strokec5 address\cf7 \strokec7 (\cf6 \strokec6 0\cf7 \strokec7 ),\cf2 \strokec2  \cf15 \strokec15 '\cf2 \strokec2 BEP20\cf7 \strokec7 :\cf2 \strokec2  burn from the zero \cf5 \strokec5 address\cf15 \strokec15 '\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\
\cb4         _balances\cf7 \strokec7 [\cf2 \strokec2 account\cf7 \strokec7 ]\cf2 \strokec2  \cf7 \strokec7 =\cf2 \strokec2  _balances\cf7 \strokec7 [\cf2 \strokec2 account\cf7 \strokec7 ].\cf2 \strokec2 sub\cf7 \strokec7 (\cf2 \strokec2 amount\cf7 \strokec7 ,\cf2 \strokec2  \cf15 \strokec15 '\cf2 \strokec2 BEP20\cf7 \strokec7 :\cf2 \strokec2  burn amount exceeds balance\cf15 \strokec15 '\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4         _totalSupply \cf7 \strokec7 =\cf2 \strokec2  _totalSupply\cf7 \strokec7 .\cf2 \strokec2 sub\cf7 \strokec7 (\cf2 \strokec2 amount\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4         \cf5 \strokec5 emit\cf2 \strokec2  Transfer\cf7 \strokec7 (\cf2 \strokec2 account\cf7 \strokec7 ,\cf2 \strokec2  \cf5 \strokec5 address\cf7 \strokec7 (\cf6 \strokec6 0\cf7 \strokec7 ),\cf2 \strokec2  amount\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4     \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\
\cb4     \cf3 \strokec3 /**\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf3 \cb4 \strokec3      * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      *\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * This is internal function is equivalent to `approve`, and can be used to\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * e.g. set automatic allowances for certain subsystems, etc.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      *\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * Emits an \{Approval\} event.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      *\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * Requirements:\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      *\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * - `owner` cannot be the zero address.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * - `spender` cannot be the zero address.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      */\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb4     \cf5 \strokec5 function\cf2 \strokec2  _approve \cf7 \strokec7 (\cf5 \strokec5 address\cf2 \strokec2  owner\cf7 \strokec7 ,\cf2 \strokec2  \cf5 \strokec5 address\cf2 \strokec2  spender\cf7 \strokec7 ,\cf2 \strokec2  \cf5 \strokec5 uint256\cf2 \strokec2  amount\cf7 \strokec7 )\cf2 \strokec2  \cf8 \strokec8 internal\cf2 \strokec2  \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4         \cf9 \strokec9 require\cf7 \strokec7 (\cf2 \strokec2 owner \cf7 \strokec7 !=\cf2 \strokec2  \cf5 \strokec5 address\cf7 \strokec7 (\cf6 \strokec6 0\cf7 \strokec7 ),\cf2 \strokec2  \cf15 \strokec15 '\cf2 \strokec2 BEP20\cf7 \strokec7 :\cf2 \strokec2  approve from the zero \cf5 \strokec5 address\cf15 \strokec15 '\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4         \cf9 \strokec9 require\cf7 \strokec7 (\cf2 \strokec2 spender \cf7 \strokec7 !=\cf2 \strokec2  \cf5 \strokec5 address\cf7 \strokec7 (\cf6 \strokec6 0\cf7 \strokec7 ),\cf2 \strokec2  \cf15 \strokec15 '\cf2 \strokec2 BEP20\cf7 \strokec7 :\cf2 \strokec2  approve to the zero \cf5 \strokec5 address\cf15 \strokec15 '\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\
\cb4         _allowances\cf7 \strokec7 [\cf2 \strokec2 owner\cf7 \strokec7 ][\cf2 \strokec2 spender\cf7 \strokec7 ]\cf2 \strokec2  \cf7 \strokec7 =\cf2 \strokec2  amount\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\cb4         \cf5 \strokec5 emit\cf2 \strokec2  Approval\cf7 \strokec7 (\cf2 \strokec2 owner\cf7 \strokec7 ,\cf2 \strokec2  spender\cf7 \strokec7 ,\cf2 \strokec2  amount\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4     \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\
\cb4     \cf3 \strokec3 /**\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf3 \cb4 \strokec3      * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * from the caller's allowance.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      *\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * See \{_burn\} and \{_approve\}.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      */\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb4     \cf5 \strokec5 function\cf2 \strokec2  _burnFrom\cf7 \strokec7 (\cf5 \strokec5 address\cf2 \strokec2  account\cf7 \strokec7 ,\cf2 \strokec2  \cf5 \strokec5 uint256\cf2 \strokec2  amount\cf7 \strokec7 )\cf2 \strokec2  \cf8 \strokec8 internal\cf2 \strokec2  \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4         _burn\cf7 \strokec7 (\cf2 \strokec2 account\cf7 \strokec7 ,\cf2 \strokec2  amount\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4         _approve\cf7 \strokec7 (\cf2 \strokec2 account\cf7 \strokec7 ,\cf2 \strokec2  _msgSender\cf7 \strokec7 (),\cf2 \strokec2  _allowances\cf7 \strokec7 [\cf2 \strokec2 account\cf7 \strokec7 ][\cf2 \strokec2 _msgSender\cf7 \strokec7 ()].\cf2 \strokec2 sub\cf7 \strokec7 (\cf2 \strokec2 amount\cf7 \strokec7 ,\cf2 \strokec2  \cf15 \strokec15 '\cf2 \strokec2 BEP20\cf7 \strokec7 :\cf2 \strokec2  burn amount exceeds allowance\cf15 \strokec15 '\cf7 \strokec7 ));\cf2 \cb1 \strokec2 \
\cb4     \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf7 \cb4 \strokec7 \}\cf2 \cb1 \strokec2 \
\
\
\pard\pardeftab720\sl360\partightenfactor0
\cf3 \cb4 \strokec3 // pragma solidity 0.6.12;\cf2 \cb1 \strokec2 \
\
\cf3 \cb4 \strokec3 // TIGERS with Governance.\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf5 \cb4 \strokec5 contract\cf2 \strokec2  TIGERS \cf5 \strokec5 is\cf2 \strokec2  BEP20\cf7 \strokec7 (\cf15 \strokec15 '\cf2 \strokec2 Tiger Swap\cf15 \strokec15 '\cf7 \strokec7 ,\cf2 \strokec2  \cf15 \strokec15 '\cf2 \strokec2 TIGERS\cf15 \strokec15 '\cf7 \strokec7 )\cf2 \strokec2  \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb4     \cf3 \strokec3 /// @notice Creates `_amount` token to `_to`. Must only be called by the owner (MasterChef).\cf2 \cb1 \strokec2 \
\cb4     \cf5 \strokec5 function\cf2 \strokec2  mint\cf7 \strokec7 (\cf5 \strokec5 address\cf2 \strokec2  _to\cf7 \strokec7 ,\cf2 \strokec2  \cf5 \strokec5 uint256\cf2 \strokec2  _amount\cf7 \strokec7 )\cf2 \strokec2  \cf8 \strokec8 public\cf2 \strokec2  onlyOwner \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4         _mint\cf7 \strokec7 (\cf2 \strokec2 _to\cf7 \strokec7 ,\cf2 \strokec2  _amount\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4         _moveDelegates\cf7 \strokec7 (\cf5 \strokec5 address\cf7 \strokec7 (\cf6 \strokec6 0\cf7 \strokec7 ),\cf2 \strokec2  _delegates\cf7 \strokec7 [\cf2 \strokec2 _to\cf7 \strokec7 ],\cf2 \strokec2  _amount\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4     \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\
\cb4     \cf3 \strokec3 // Copied and modified from YAM code:\cf2 \cb1 \strokec2 \
\cb4     \cf3 \strokec3 // https://github.com/yam-finance/yam-protocol/blob/master/contracts/token/YAMGovernanceStorage.sol\cf2 \cb1 \strokec2 \
\cb4     \cf3 \strokec3 // https://github.com/yam-finance/yam-protocol/blob/master/contracts/token/YAMGovernance.sol\cf2 \cb1 \strokec2 \
\cb4     \cf3 \strokec3 // Which is copied and modified from COMPOUND:\cf2 \cb1 \strokec2 \
\cb4     \cf3 \strokec3 // https://github.com/compound-finance/compound-protocol/blob/master/contracts/Governance/Comp.sol\cf2 \cb1 \strokec2 \
\
\cb4     \cb1 \
\
\cb4     \cf5 \strokec5 mapping\cf2 \strokec2  \cf7 \strokec7 (\cf5 \strokec5 address\cf2 \strokec2  => \cf5 \strokec5 address\cf7 \strokec7 )\cf2 \strokec2  \cf8 \strokec8 internal\cf2 \strokec2  _delegates\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\
\cb4     \cf3 \strokec3 /// @notice A checkpoint for marking number of votes from a given block\cf2 \cb1 \strokec2 \
\
\cb4     \cf5 \strokec5 struct\cf2 \strokec2  Checkpoint \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4         \cf5 \strokec5 uint32\cf2 \strokec2  fromBlock\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\cb4         \cf5 \strokec5 uint256\cf2 \strokec2  votes\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\cb4     \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\
\cb4     \cf3 \strokec3 /// @notice A record of votes checkpoints for each account, by index\cf2 \cb1 \strokec2 \
\cb4     \cf5 \strokec5 mapping\cf2 \strokec2  \cf7 \strokec7 (\cf5 \strokec5 address\cf2 \strokec2  => \cf5 \strokec5 mapping\cf2 \strokec2  \cf7 \strokec7 (\cf5 \strokec5 uint32\cf2 \strokec2  => Checkpoint\cf7 \strokec7 ))\cf2 \strokec2  \cf8 \strokec8 public\cf2 \strokec2  checkpoints\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\
\cb4     \cf3 \strokec3 /// @notice The number of checkpoints for each account\cf2 \cb1 \strokec2 \
\cb4     \cf5 \strokec5 mapping\cf2 \strokec2  \cf7 \strokec7 (\cf5 \strokec5 address\cf2 \strokec2  => \cf5 \strokec5 uint32\cf7 \strokec7 )\cf2 \strokec2  \cf8 \strokec8 public\cf2 \strokec2  numCheckpoints\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\
\cb4     \cf3 \strokec3 /// @notice The EIP-712 typehash for the contract's domain\cf2 \cb1 \strokec2 \
\cb4     \cf5 \strokec5 bytes32\cf2 \strokec2  \cf8 \strokec8 public\cf2 \strokec2  \cf5 \strokec5 constant\cf2 \strokec2  DOMAIN_TYPEHASH \cf7 \strokec7 =\cf2 \strokec2  \cf9 \strokec9 keccak256\cf7 \strokec7 (\cf15 \strokec15 "EIP712Domain(string name,uint256 chainId,address verifyingContract)"\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\
\cb4     \cf3 \strokec3 /// @notice The EIP-712 typehash for the delegation struct used by the contract\cf2 \cb1 \strokec2 \
\cb4     \cf5 \strokec5 bytes32\cf2 \strokec2  \cf8 \strokec8 public\cf2 \strokec2  \cf5 \strokec5 constant\cf2 \strokec2  DELEGATION_TYPEHASH \cf7 \strokec7 =\cf2 \strokec2  \cf9 \strokec9 keccak256\cf7 \strokec7 (\cf15 \strokec15 "Delegation(address delegatee,uint256 nonce,uint256 expiry)"\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\
\cb4     \cf3 \strokec3 /// @notice A record of states for signing / validating signatures\cf2 \cb1 \strokec2 \
\cb4     \cf5 \strokec5 mapping\cf2 \strokec2  \cf7 \strokec7 (\cf5 \strokec5 address\cf2 \strokec2  => \cf5 \strokec5 uint\cf7 \strokec7 )\cf2 \strokec2  \cf8 \strokec8 public\cf2 \strokec2  nonces\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\
\cb4       \cf3 \strokec3 /// @notice An event thats emitted when an account changes its delegate\cf2 \cb1 \strokec2 \
\cb4     \cf5 \strokec5 event\cf2 \strokec2  DelegateChanged\cf7 \strokec7 (\cf5 \strokec5 address\cf2 \strokec2  \cf13 \strokec13 indexed\cf2 \strokec2  delegator\cf7 \strokec7 ,\cf2 \strokec2  \cf5 \strokec5 address\cf2 \strokec2  \cf13 \strokec13 indexed\cf2 \strokec2  fromDelegate\cf7 \strokec7 ,\cf2 \strokec2  \cf5 \strokec5 address\cf2 \strokec2  \cf13 \strokec13 indexed\cf2 \strokec2  toDelegate\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\
\cb4     \cf3 \strokec3 /// @notice An event thats emitted when a delegate account's vote balance changes\cf2 \cb1 \strokec2 \
\cb4     \cf5 \strokec5 event\cf2 \strokec2  DelegateVotesChanged\cf7 \strokec7 (\cf5 \strokec5 address\cf2 \strokec2  \cf13 \strokec13 indexed\cf2 \strokec2  delegate\cf7 \strokec7 ,\cf2 \strokec2  \cf5 \strokec5 uint\cf2 \strokec2  previousBalance\cf7 \strokec7 ,\cf2 \strokec2  \cf5 \strokec5 uint\cf2 \strokec2  newBalance\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\
\cb4     \cf3 \strokec3 /**\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf3 \cb4 \strokec3      * @notice Delegate votes from `msg.sender` to `delegatee`\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * @param delegator The address to get delegatee for\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      */\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb4     \cf5 \strokec5 function\cf2 \strokec2  delegates\cf7 \strokec7 (\cf5 \strokec5 address\cf2 \strokec2  delegator\cf7 \strokec7 )\cf2 \cb1 \strokec2 \
\cb4         \cf8 \strokec8 external\cf2 \cb1 \strokec2 \
\cb4         \cf8 \strokec8 view\cf2 \cb1 \strokec2 \
\cb4         \cf11 \strokec11 returns\cf2 \strokec2  \cf7 \strokec7 (\cf5 \strokec5 address\cf7 \strokec7 )\cf2 \cb1 \strokec2 \
\cb4     \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4         \cf11 \strokec11 return\cf2 \strokec2  _delegates\cf7 \strokec7 [\cf2 \strokec2 delegator\cf7 \strokec7 ];\cf2 \cb1 \strokec2 \
\cb4     \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\
\cb4    \cf3 \strokec3 /**\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf3 \cb4 \strokec3     * @notice Delegate votes from `msg.sender` to `delegatee`\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3     * @param delegatee The address to delegate votes to\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3     */\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb4     \cf5 \strokec5 function\cf2 \strokec2  delegate\cf7 \strokec7 (\cf5 \strokec5 address\cf2 \strokec2  delegatee\cf7 \strokec7 )\cf2 \strokec2  \cf8 \strokec8 external\cf2 \strokec2  \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4         \cf11 \strokec11 return\cf2 \strokec2  _delegate\cf7 \strokec7 (\cf9 \strokec9 msg\cf7 \strokec7 .\cf2 \strokec2 sender\cf7 \strokec7 ,\cf2 \strokec2  delegatee\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4     \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\
\cb4     \cf3 \strokec3 /**\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf3 \cb4 \strokec3      * @notice Delegates votes from signatory to `delegatee`\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * @param delegatee The address to delegate votes to\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * @param nonce The contract state required to match the signature\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * @param expiry The time at which to expire the signature\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * @param v The recovery byte of the signature\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * @param r Half of the ECDSA signature pair\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * @param s Half of the ECDSA signature pair\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      */\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb4     \cf5 \strokec5 function\cf2 \strokec2  delegateBySig\cf7 \strokec7 (\cf2 \cb1 \strokec2 \
\cb4         \cf5 \strokec5 address\cf2 \strokec2  delegatee\cf7 \strokec7 ,\cf2 \cb1 \strokec2 \
\cb4         \cf5 \strokec5 uint\cf2 \strokec2  nonce\cf7 \strokec7 ,\cf2 \cb1 \strokec2 \
\cb4         \cf5 \strokec5 uint\cf2 \strokec2  expiry\cf7 \strokec7 ,\cf2 \cb1 \strokec2 \
\cb4         \cf5 \strokec5 uint8\cf2 \strokec2  v\cf7 \strokec7 ,\cf2 \cb1 \strokec2 \
\cb4         \cf5 \strokec5 bytes32\cf2 \strokec2  r\cf7 \strokec7 ,\cf2 \cb1 \strokec2 \
\cb4         \cf5 \strokec5 bytes32\cf2 \strokec2  s\cb1 \
\cb4     \cf7 \strokec7 )\cf2 \cb1 \strokec2 \
\cb4         \cf8 \strokec8 external\cf2 \cb1 \strokec2 \
\cb4     \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4         \cf5 \strokec5 bytes32\cf2 \strokec2  domainSeparator \cf7 \strokec7 =\cf2 \strokec2  \cf9 \strokec9 keccak256\cf7 \strokec7 (\cf2 \cb1 \strokec2 \
\cb4             \cf9 \strokec9 abi\cf7 \strokec7 .\cf2 \strokec2 encode\cf7 \strokec7 (\cf2 \cb1 \strokec2 \
\cb4                 DOMAIN_TYPEHASH\cf7 \strokec7 ,\cf2 \cb1 \strokec2 \
\cb4                 \cf9 \strokec9 keccak256\cf7 \strokec7 (\cf9 \strokec9 bytes\cf7 \strokec7 (\cf2 \strokec2 name\cf7 \strokec7 ())),\cf2 \cb1 \strokec2 \
\cb4                 getChainId\cf7 \strokec7 (),\cf2 \cb1 \strokec2 \
\cb4                 \cf5 \strokec5 address\cf7 \strokec7 (\cf10 \strokec10 this\cf7 \strokec7 )\cf2 \cb1 \strokec2 \
\cb4             \cf7 \strokec7 )\cf2 \cb1 \strokec2 \
\cb4         \cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\
\cb4         \cf5 \strokec5 bytes32\cf2 \strokec2  structHash \cf7 \strokec7 =\cf2 \strokec2  \cf9 \strokec9 keccak256\cf7 \strokec7 (\cf2 \cb1 \strokec2 \
\cb4             \cf9 \strokec9 abi\cf7 \strokec7 .\cf2 \strokec2 encode\cf7 \strokec7 (\cf2 \cb1 \strokec2 \
\cb4                 DELEGATION_TYPEHASH\cf7 \strokec7 ,\cf2 \cb1 \strokec2 \
\cb4                 delegatee\cf7 \strokec7 ,\cf2 \cb1 \strokec2 \
\cb4                 nonce\cf7 \strokec7 ,\cf2 \cb1 \strokec2 \
\cb4                 expiry\cb1 \
\cb4             \cf7 \strokec7 )\cf2 \cb1 \strokec2 \
\cb4         \cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\
\cb4         \cf5 \strokec5 bytes32\cf2 \strokec2  digest \cf7 \strokec7 =\cf2 \strokec2  \cf9 \strokec9 keccak256\cf7 \strokec7 (\cf2 \cb1 \strokec2 \
\cb4             \cf9 \strokec9 abi\cf7 \strokec7 .\cf2 \strokec2 encodePacked\cf7 \strokec7 (\cf2 \cb1 \strokec2 \
\cb4                 \cf15 \strokec15 "\\x19\\x01"\cf7 \strokec7 ,\cf2 \cb1 \strokec2 \
\cb4                 domainSeparator\cf7 \strokec7 ,\cf2 \cb1 \strokec2 \
\cb4                 structHash\cb1 \
\cb4             \cf7 \strokec7 )\cf2 \cb1 \strokec2 \
\cb4         \cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\
\cb4         \cf5 \strokec5 address\cf2 \strokec2  signatory \cf7 \strokec7 =\cf2 \strokec2  \cf9 \strokec9 ecrecover\cf7 \strokec7 (\cf2 \strokec2 digest\cf7 \strokec7 ,\cf2 \strokec2  v\cf7 \strokec7 ,\cf2 \strokec2  r\cf7 \strokec7 ,\cf2 \strokec2  s\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4         \cf9 \strokec9 require\cf7 \strokec7 (\cf2 \strokec2 signatory \cf7 \strokec7 !=\cf2 \strokec2  \cf5 \strokec5 address\cf7 \strokec7 (\cf6 \strokec6 0\cf7 \strokec7 ),\cf2 \strokec2  \cf15 \strokec15 "TIGERS::delegateBySig: invalid signature"\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4         \cf9 \strokec9 require\cf7 \strokec7 (\cf2 \strokec2 nonce \cf7 \strokec7 ==\cf2 \strokec2  nonces\cf7 \strokec7 [\cf2 \strokec2 signatory\cf7 \strokec7 ]++,\cf2 \strokec2  \cf15 \strokec15 "TIGERS::delegateBySig: invalid nonce"\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4         \cf9 \strokec9 require\cf7 \strokec7 (\cf2 \strokec2 now \cf7 \strokec7 <=\cf2 \strokec2  expiry\cf7 \strokec7 ,\cf2 \strokec2  \cf15 \strokec15 "TIGERS::delegateBySig: signature expired"\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4         \cf11 \strokec11 return\cf2 \strokec2  _delegate\cf7 \strokec7 (\cf2 \strokec2 signatory\cf7 \strokec7 ,\cf2 \strokec2  delegatee\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4     \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\
\cb4     \cf3 \strokec3 /**\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf3 \cb4 \strokec3      * @notice Gets the current votes balance for `account`\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * @param account The address to get votes balance\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * @return The number of current votes for `account`\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      */\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb4     \cf5 \strokec5 function\cf2 \strokec2  getCurrentVotes\cf7 \strokec7 (\cf5 \strokec5 address\cf2 \strokec2  account\cf7 \strokec7 )\cf2 \cb1 \strokec2 \
\cb4         \cf8 \strokec8 external\cf2 \cb1 \strokec2 \
\cb4         \cf8 \strokec8 view\cf2 \cb1 \strokec2 \
\cb4         \cf11 \strokec11 returns\cf2 \strokec2  \cf7 \strokec7 (\cf5 \strokec5 uint256\cf7 \strokec7 )\cf2 \cb1 \strokec2 \
\cb4     \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4         \cf5 \strokec5 uint32\cf2 \strokec2  nCheckpoints \cf7 \strokec7 =\cf2 \strokec2  numCheckpoints\cf7 \strokec7 [\cf2 \strokec2 account\cf7 \strokec7 ];\cf2 \cb1 \strokec2 \
\cb4         \cf11 \strokec11 return\cf2 \strokec2  nCheckpoints \cf7 \strokec7 >\cf2 \strokec2  \cf6 \strokec6 0\cf2 \strokec2  \cf7 \strokec7 ?\cf2 \strokec2  checkpoints\cf7 \strokec7 [\cf2 \strokec2 account\cf7 \strokec7 ][\cf2 \strokec2 nCheckpoints \cf7 \strokec7 -\cf2 \strokec2  \cf6 \strokec6 1\cf7 \strokec7 ].\cf2 \strokec2 votes \cf7 \strokec7 :\cf2 \strokec2  \cf6 \strokec6 0\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\cb4     \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\
\cb4     \cf3 \strokec3 /**\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf3 \cb4 \strokec3      * @notice Determine the prior number of votes for an account as of a block number\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * @param account The address of the account to check\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * @param blockNumber The block number to get the vote balance at\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      * @return The number of votes the account had as of the given block\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3      */\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb4     \cf5 \strokec5 function\cf2 \strokec2  getPriorVotes\cf7 \strokec7 (\cf5 \strokec5 address\cf2 \strokec2  account\cf7 \strokec7 ,\cf2 \strokec2  \cf5 \strokec5 uint\cf2 \strokec2  blockNumber\cf7 \strokec7 )\cf2 \cb1 \strokec2 \
\cb4         \cf8 \strokec8 external\cf2 \cb1 \strokec2 \
\cb4         \cf8 \strokec8 view\cf2 \cb1 \strokec2 \
\cb4         \cf11 \strokec11 returns\cf2 \strokec2  \cf7 \strokec7 (\cf5 \strokec5 uint256\cf7 \strokec7 )\cf2 \cb1 \strokec2 \
\cb4     \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4         \cf9 \strokec9 require\cf7 \strokec7 (\cf2 \strokec2 blockNumber \cf7 \strokec7 <\cf2 \strokec2  \cf9 \strokec9 block\cf7 \strokec7 .\cf2 \strokec2 number\cf7 \strokec7 ,\cf2 \strokec2  \cf15 \strokec15 "TIGERS::getPriorVotes: not yet determined"\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\
\cb4         \cf5 \strokec5 uint32\cf2 \strokec2  nCheckpoints \cf7 \strokec7 =\cf2 \strokec2  numCheckpoints\cf7 \strokec7 [\cf2 \strokec2 account\cf7 \strokec7 ];\cf2 \cb1 \strokec2 \
\cb4         \cf13 \strokec13 if\cf2 \strokec2  \cf7 \strokec7 (\cf2 \strokec2 nCheckpoints \cf7 \strokec7 ==\cf2 \strokec2  \cf6 \strokec6 0\cf7 \strokec7 )\cf2 \strokec2  \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4             \cf11 \strokec11 return\cf2 \strokec2  \cf6 \strokec6 0\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\cb4         \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\
\cb4         \cf3 \strokec3 // First check most recent balance\cf2 \cb1 \strokec2 \
\cb4         \cf13 \strokec13 if\cf2 \strokec2  \cf7 \strokec7 (\cf2 \strokec2 checkpoints\cf7 \strokec7 [\cf2 \strokec2 account\cf7 \strokec7 ][\cf2 \strokec2 nCheckpoints \cf7 \strokec7 -\cf2 \strokec2  \cf6 \strokec6 1\cf7 \strokec7 ].\cf2 \strokec2 fromBlock \cf7 \strokec7 <=\cf2 \strokec2  blockNumber\cf7 \strokec7 )\cf2 \strokec2  \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4             \cf11 \strokec11 return\cf2 \strokec2  checkpoints\cf7 \strokec7 [\cf2 \strokec2 account\cf7 \strokec7 ][\cf2 \strokec2 nCheckpoints \cf7 \strokec7 -\cf2 \strokec2  \cf6 \strokec6 1\cf7 \strokec7 ].\cf2 \strokec2 votes\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\cb4         \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\
\cb4         \cf3 \strokec3 // Next check implicit zero balance\cf2 \cb1 \strokec2 \
\cb4         \cf13 \strokec13 if\cf2 \strokec2  \cf7 \strokec7 (\cf2 \strokec2 checkpoints\cf7 \strokec7 [\cf2 \strokec2 account\cf7 \strokec7 ][\cf6 \strokec6 0\cf7 \strokec7 ].\cf2 \strokec2 fromBlock \cf7 \strokec7 >\cf2 \strokec2  blockNumber\cf7 \strokec7 )\cf2 \strokec2  \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4             \cf11 \strokec11 return\cf2 \strokec2  \cf6 \strokec6 0\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\cb4         \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\
\cb4         \cf5 \strokec5 uint32\cf2 \strokec2  lower \cf7 \strokec7 =\cf2 \strokec2  \cf6 \strokec6 0\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\cb4         \cf5 \strokec5 uint32\cf2 \strokec2  upper \cf7 \strokec7 =\cf2 \strokec2  nCheckpoints \cf7 \strokec7 -\cf2 \strokec2  \cf6 \strokec6 1\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\cb4         \cf16 \strokec16 while\cf2 \strokec2  \cf7 \strokec7 (\cf2 \strokec2 upper \cf7 \strokec7 >\cf2 \strokec2  lower\cf7 \strokec7 )\cf2 \strokec2  \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4             \cf5 \strokec5 uint32\cf2 \strokec2  center \cf7 \strokec7 =\cf2 \strokec2  upper \cf7 \strokec7 -\cf2 \strokec2  \cf7 \strokec7 (\cf2 \strokec2 upper \cf7 \strokec7 -\cf2 \strokec2  lower\cf7 \strokec7 )\cf2 \strokec2  \cf7 \strokec7 /\cf2 \strokec2  \cf6 \strokec6 2\cf7 \strokec7 ;\cf2 \strokec2  \cf3 \strokec3 // ceil, avoiding overflow\cf2 \cb1 \strokec2 \
\cb4             Checkpoint \cf12 \strokec12 memory\cf2 \strokec2  cp \cf7 \strokec7 =\cf2 \strokec2  checkpoints\cf7 \strokec7 [\cf2 \strokec2 account\cf7 \strokec7 ][\cf2 \strokec2 center\cf7 \strokec7 ];\cf2 \cb1 \strokec2 \
\cb4             \cf13 \strokec13 if\cf2 \strokec2  \cf7 \strokec7 (\cf2 \strokec2 cp\cf7 \strokec7 .\cf2 \strokec2 fromBlock \cf7 \strokec7 ==\cf2 \strokec2  blockNumber\cf7 \strokec7 )\cf2 \strokec2  \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4                 \cf11 \strokec11 return\cf2 \strokec2  cp\cf7 \strokec7 .\cf2 \strokec2 votes\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\cb4             \cf7 \strokec7 \}\cf2 \strokec2  \cf13 \strokec13 else\cf2 \strokec2  \cf13 \strokec13 if\cf2 \strokec2  \cf7 \strokec7 (\cf2 \strokec2 cp\cf7 \strokec7 .\cf2 \strokec2 fromBlock \cf7 \strokec7 <\cf2 \strokec2  blockNumber\cf7 \strokec7 )\cf2 \strokec2  \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4                 lower \cf7 \strokec7 =\cf2 \strokec2  center\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\cb4             \cf7 \strokec7 \}\cf2 \strokec2  \cf13 \strokec13 else\cf2 \strokec2  \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4                 upper \cf7 \strokec7 =\cf2 \strokec2  center \cf7 \strokec7 -\cf2 \strokec2  \cf6 \strokec6 1\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\cb4             \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\cb4         \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\cb4         \cf11 \strokec11 return\cf2 \strokec2  checkpoints\cf7 \strokec7 [\cf2 \strokec2 account\cf7 \strokec7 ][\cf2 \strokec2 lower\cf7 \strokec7 ].\cf2 \strokec2 votes\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\cb4     \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\
\cb4     \cf5 \strokec5 function\cf2 \strokec2  _delegate\cf7 \strokec7 (\cf5 \strokec5 address\cf2 \strokec2  delegator\cf7 \strokec7 ,\cf2 \strokec2  \cf5 \strokec5 address\cf2 \strokec2  delegatee\cf7 \strokec7 )\cf2 \cb1 \strokec2 \
\cb4         \cf8 \strokec8 internal\cf2 \cb1 \strokec2 \
\cb4     \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4         \cf5 \strokec5 address\cf2 \strokec2  currentDelegate \cf7 \strokec7 =\cf2 \strokec2  _delegates\cf7 \strokec7 [\cf2 \strokec2 delegator\cf7 \strokec7 ];\cf2 \cb1 \strokec2 \
\cb4         \cf5 \strokec5 uint256\cf2 \strokec2  delegatorBalance \cf7 \strokec7 =\cf2 \strokec2  balanceOf\cf7 \strokec7 (\cf2 \strokec2 delegator\cf7 \strokec7 );\cf2 \strokec2  \cf3 \strokec3 // balance of underlying TIGERS (not scaled);\cf2 \cb1 \strokec2 \
\cb4         _delegates\cf7 \strokec7 [\cf2 \strokec2 delegator\cf7 \strokec7 ]\cf2 \strokec2  \cf7 \strokec7 =\cf2 \strokec2  delegatee\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\
\cb4         \cf5 \strokec5 emit\cf2 \strokec2  DelegateChanged\cf7 \strokec7 (\cf2 \strokec2 delegator\cf7 \strokec7 ,\cf2 \strokec2  currentDelegate\cf7 \strokec7 ,\cf2 \strokec2  delegatee\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\
\cb4         _moveDelegates\cf7 \strokec7 (\cf2 \strokec2 currentDelegate\cf7 \strokec7 ,\cf2 \strokec2  delegatee\cf7 \strokec7 ,\cf2 \strokec2  delegatorBalance\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4     \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\
\cb4     \cf5 \strokec5 function\cf2 \strokec2  _moveDelegates\cf7 \strokec7 (\cf5 \strokec5 address\cf2 \strokec2  srcRep\cf7 \strokec7 ,\cf2 \strokec2  \cf5 \strokec5 address\cf2 \strokec2  dstRep\cf7 \strokec7 ,\cf2 \strokec2  \cf5 \strokec5 uint256\cf2 \strokec2  amount\cf7 \strokec7 )\cf2 \strokec2  \cf8 \strokec8 internal\cf2 \strokec2  \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4         \cf13 \strokec13 if\cf2 \strokec2  \cf7 \strokec7 (\cf2 \strokec2 srcRep \cf7 \strokec7 !=\cf2 \strokec2  dstRep \cf7 \strokec7 &&\cf2 \strokec2  amount \cf7 \strokec7 >\cf2 \strokec2  \cf6 \strokec6 0\cf7 \strokec7 )\cf2 \strokec2  \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4             \cf13 \strokec13 if\cf2 \strokec2  \cf7 \strokec7 (\cf2 \strokec2 srcRep \cf7 \strokec7 !=\cf2 \strokec2  \cf5 \strokec5 address\cf7 \strokec7 (\cf6 \strokec6 0\cf7 \strokec7 ))\cf2 \strokec2  \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4                 \cf3 \strokec3 // decrease old representative\cf2 \cb1 \strokec2 \
\cb4                 \cf5 \strokec5 uint32\cf2 \strokec2  srcRepNum \cf7 \strokec7 =\cf2 \strokec2  numCheckpoints\cf7 \strokec7 [\cf2 \strokec2 srcRep\cf7 \strokec7 ];\cf2 \cb1 \strokec2 \
\cb4                 \cf5 \strokec5 uint256\cf2 \strokec2  srcRepOld \cf7 \strokec7 =\cf2 \strokec2  srcRepNum \cf7 \strokec7 >\cf2 \strokec2  \cf6 \strokec6 0\cf2 \strokec2  \cf7 \strokec7 ?\cf2 \strokec2  checkpoints\cf7 \strokec7 [\cf2 \strokec2 srcRep\cf7 \strokec7 ][\cf2 \strokec2 srcRepNum \cf7 \strokec7 -\cf2 \strokec2  \cf6 \strokec6 1\cf7 \strokec7 ].\cf2 \strokec2 votes \cf7 \strokec7 :\cf2 \strokec2  \cf6 \strokec6 0\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\cb4                 \cf5 \strokec5 uint256\cf2 \strokec2  srcRepNew \cf7 \strokec7 =\cf2 \strokec2  srcRepOld\cf7 \strokec7 .\cf2 \strokec2 sub\cf7 \strokec7 (\cf2 \strokec2 amount\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4                 _writeCheckpoint\cf7 \strokec7 (\cf2 \strokec2 srcRep\cf7 \strokec7 ,\cf2 \strokec2  srcRepNum\cf7 \strokec7 ,\cf2 \strokec2  srcRepOld\cf7 \strokec7 ,\cf2 \strokec2  srcRepNew\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4             \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\
\cb4             \cf13 \strokec13 if\cf2 \strokec2  \cf7 \strokec7 (\cf2 \strokec2 dstRep \cf7 \strokec7 !=\cf2 \strokec2  \cf5 \strokec5 address\cf7 \strokec7 (\cf6 \strokec6 0\cf7 \strokec7 ))\cf2 \strokec2  \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4                 \cf3 \strokec3 // increase new representative\cf2 \cb1 \strokec2 \
\cb4                 \cf5 \strokec5 uint32\cf2 \strokec2  dstRepNum \cf7 \strokec7 =\cf2 \strokec2  numCheckpoints\cf7 \strokec7 [\cf2 \strokec2 dstRep\cf7 \strokec7 ];\cf2 \cb1 \strokec2 \
\cb4                 \cf5 \strokec5 uint256\cf2 \strokec2  dstRepOld \cf7 \strokec7 =\cf2 \strokec2  dstRepNum \cf7 \strokec7 >\cf2 \strokec2  \cf6 \strokec6 0\cf2 \strokec2  \cf7 \strokec7 ?\cf2 \strokec2  checkpoints\cf7 \strokec7 [\cf2 \strokec2 dstRep\cf7 \strokec7 ][\cf2 \strokec2 dstRepNum \cf7 \strokec7 -\cf2 \strokec2  \cf6 \strokec6 1\cf7 \strokec7 ].\cf2 \strokec2 votes \cf7 \strokec7 :\cf2 \strokec2  \cf6 \strokec6 0\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\cb4                 \cf5 \strokec5 uint256\cf2 \strokec2  dstRepNew \cf7 \strokec7 =\cf2 \strokec2  dstRepOld\cf7 \strokec7 .\cf2 \strokec2 add\cf7 \strokec7 (\cf2 \strokec2 amount\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4                 _writeCheckpoint\cf7 \strokec7 (\cf2 \strokec2 dstRep\cf7 \strokec7 ,\cf2 \strokec2  dstRepNum\cf7 \strokec7 ,\cf2 \strokec2  dstRepOld\cf7 \strokec7 ,\cf2 \strokec2  dstRepNew\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4             \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\cb4         \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\cb4     \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\
\cb4     \cf5 \strokec5 function\cf2 \strokec2  _writeCheckpoint\cf7 \strokec7 (\cf2 \cb1 \strokec2 \
\cb4         \cf5 \strokec5 address\cf2 \strokec2  delegatee\cf7 \strokec7 ,\cf2 \cb1 \strokec2 \
\cb4         \cf5 \strokec5 uint32\cf2 \strokec2  nCheckpoints\cf7 \strokec7 ,\cf2 \cb1 \strokec2 \
\cb4         \cf5 \strokec5 uint256\cf2 \strokec2  oldVotes\cf7 \strokec7 ,\cf2 \cb1 \strokec2 \
\cb4         \cf5 \strokec5 uint256\cf2 \strokec2  newVotes\cb1 \
\cb4     \cf7 \strokec7 )\cf2 \cb1 \strokec2 \
\cb4         \cf8 \strokec8 internal\cf2 \cb1 \strokec2 \
\cb4     \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4         \cf5 \strokec5 uint32\cf2 \strokec2  blockNumber \cf7 \strokec7 =\cf2 \strokec2  safe32\cf7 \strokec7 (\cf9 \strokec9 block\cf7 \strokec7 .\cf2 \strokec2 number\cf7 \strokec7 ,\cf2 \strokec2  \cf15 \strokec15 "TIGERS::_writeCheckpoint: block number exceeds 32 bits"\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\
\cb4         \cf13 \strokec13 if\cf2 \strokec2  \cf7 \strokec7 (\cf2 \strokec2 nCheckpoints \cf7 \strokec7 >\cf2 \strokec2  \cf6 \strokec6 0\cf2 \strokec2  \cf7 \strokec7 &&\cf2 \strokec2  checkpoints\cf7 \strokec7 [\cf2 \strokec2 delegatee\cf7 \strokec7 ][\cf2 \strokec2 nCheckpoints \cf7 \strokec7 -\cf2 \strokec2  \cf6 \strokec6 1\cf7 \strokec7 ].\cf2 \strokec2 fromBlock \cf7 \strokec7 ==\cf2 \strokec2  blockNumber\cf7 \strokec7 )\cf2 \strokec2  \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4             checkpoints\cf7 \strokec7 [\cf2 \strokec2 delegatee\cf7 \strokec7 ][\cf2 \strokec2 nCheckpoints \cf7 \strokec7 -\cf2 \strokec2  \cf6 \strokec6 1\cf7 \strokec7 ].\cf2 \strokec2 votes \cf7 \strokec7 =\cf2 \strokec2  newVotes\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\cb4         \cf7 \strokec7 \}\cf2 \strokec2  \cf13 \strokec13 else\cf2 \strokec2  \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4             checkpoints\cf7 \strokec7 [\cf2 \strokec2 delegatee\cf7 \strokec7 ][\cf2 \strokec2 nCheckpoints\cf7 \strokec7 ]\cf2 \strokec2  \cf7 \strokec7 =\cf2 \strokec2  Checkpoint\cf7 \strokec7 (\cf2 \strokec2 blockNumber\cf7 \strokec7 ,\cf2 \strokec2  newVotes\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4             numCheckpoints\cf7 \strokec7 [\cf2 \strokec2 delegatee\cf7 \strokec7 ]\cf2 \strokec2  \cf7 \strokec7 =\cf2 \strokec2  nCheckpoints \cf7 \strokec7 +\cf2 \strokec2  \cf6 \strokec6 1\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\cb4         \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\
\cb4         \cf5 \strokec5 emit\cf2 \strokec2  DelegateVotesChanged\cf7 \strokec7 (\cf2 \strokec2 delegatee\cf7 \strokec7 ,\cf2 \strokec2  oldVotes\cf7 \strokec7 ,\cf2 \strokec2  newVotes\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4     \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\
\cb4     \cf5 \strokec5 function\cf2 \strokec2  safe32\cf7 \strokec7 (\cf5 \strokec5 uint\cf2 \strokec2  n\cf7 \strokec7 ,\cf2 \strokec2  \cf5 \strokec5 string\cf2 \strokec2  \cf12 \strokec12 memory\cf2 \strokec2  errorMessage\cf7 \strokec7 )\cf2 \strokec2  \cf8 \strokec8 internal\cf2 \strokec2  \cf8 \strokec8 pure\cf2 \strokec2  \cf11 \strokec11 returns\cf2 \strokec2  \cf7 \strokec7 (\cf5 \strokec5 uint32\cf7 \strokec7 )\cf2 \strokec2  \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4         \cf9 \strokec9 require\cf7 \strokec7 (\cf2 \strokec2 n \cf7 \strokec7 <\cf2 \strokec2  \cf6 \strokec6 2\cf2 \strokec2 **\cf6 \strokec6 32\cf7 \strokec7 ,\cf2 \strokec2  errorMessage\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4         \cf11 \strokec11 return\cf2 \strokec2  \cf5 \strokec5 uint32\cf7 \strokec7 (\cf2 \strokec2 n\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4     \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\
\cb4     \cf5 \strokec5 function\cf2 \strokec2  getChainId\cf7 \strokec7 ()\cf2 \strokec2  \cf8 \strokec8 internal\cf2 \strokec2  \cf8 \strokec8 pure\cf2 \strokec2  \cf11 \strokec11 returns\cf2 \strokec2  \cf7 \strokec7 (\cf5 \strokec5 uint\cf7 \strokec7 )\cf2 \strokec2  \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4         \cf5 \strokec5 uint256\cf2 \strokec2  chainId\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\cb4         assembly \cf7 \strokec7 \{\cf2 \strokec2  chainId := chainid\cf7 \strokec7 ()\cf2 \strokec2  \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\cb4         \cf11 \strokec11 return\cf2 \strokec2  chainId\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\cb4     \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf7 \cb4 \strokec7 \}\cf2 \cb1 \strokec2 \
\
\
\
\
\pard\pardeftab720\sl360\partightenfactor0
\cf3 \cb4 \strokec3 // MasterChef is the master of TIGERS. He can make TIGERS and he is a fair guy.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3 //\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3 // Note that it's ownable and the owner wields tremendous power. The ownership\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3 // will be transferred to a governance smart contract once TIGERS is sufficiently\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3 // distributed and the community can show to govern itself.\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3 //\cf2 \cb1 \strokec2 \
\
\pard\pardeftab720\sl360\partightenfactor0
\cf5 \cb4 \strokec5 contract\cf2 \strokec2  MasterChef \cf5 \strokec5 is\cf2 \strokec2  Ownable\cf7 \strokec7 ,\cf2 \strokec2  ReentrancyGuard \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb4     \cf5 \strokec5 using\cf2 \strokec2  SafeMath \cf16 \strokec16 for\cf2 \strokec2  \cf5 \strokec5 uint256\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\cb4     \cf5 \strokec5 using\cf2 \strokec2  SafeBEP20 \cf16 \strokec16 for\cf2 \strokec2  IBEP20\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\
\cb4     \cf3 \strokec3 // Info of each user.\cf2 \cb1 \strokec2 \
\cb4     \cf5 \strokec5 struct\cf2 \strokec2  UserInfo \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4         \cf5 \strokec5 uint256\cf2 \strokec2  amount\cf7 \strokec7 ;\cf2 \strokec2          \cf3 \strokec3 // How many LP tokens the user has provided.\cf2 \cb1 \strokec2 \
\cb4         \cf5 \strokec5 uint256\cf2 \strokec2  rewardDebt\cf7 \strokec7 ;\cf2 \strokec2      \cf3 \strokec3 // Reward debt. See explanation below.\cf2 \cb1 \strokec2 \
\cb4         \cf3 \strokec3 //\cf2 \cb1 \strokec2 \
\cb4         \cf3 \strokec3 // We do some fancy math here. Basically, any point in time, the amount of TIGERS\cf2 \cb1 \strokec2 \
\cb4         \cf3 \strokec3 // entitled to a user but is pending to be distributed is:\cf2 \cb1 \strokec2 \
\cb4         \cf3 \strokec3 //\cf2 \cb1 \strokec2 \
\cb4         \cf3 \strokec3 //   pending reward = (user.amount * pool.accTigersPerShare) - user.rewardDebt\cf2 \cb1 \strokec2 \
\cb4         \cf3 \strokec3 //\cf2 \cb1 \strokec2 \
\cb4         \cf3 \strokec3 // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\cf2 \cb1 \strokec2 \
\cb4         \cf3 \strokec3 //   1. The pool's `accTigersPerShare` (and `lastRewardBlock`) gets updated.\cf2 \cb1 \strokec2 \
\cb4         \cf3 \strokec3 //   2. User receives the pending reward sent to his/her address.\cf2 \cb1 \strokec2 \
\cb4         \cf3 \strokec3 //   3. User's `amount` gets updated.\cf2 \cb1 \strokec2 \
\cb4         \cf3 \strokec3 //   4. User's `rewardDebt` gets updated.\cf2 \cb1 \strokec2 \
\cb4     \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\
\cb4     \cf3 \strokec3 // Info of each pool.\cf2 \cb1 \strokec2 \
\cb4     \cf5 \strokec5 struct\cf2 \strokec2  PoolInfo \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4         IBEP20 lpToken\cf7 \strokec7 ;\cf2 \strokec2            \cf3 \strokec3 // Address of LP token contract.\cf2 \cb1 \strokec2 \
\cb4         \cf5 \strokec5 uint256\cf2 \strokec2  allocPoint\cf7 \strokec7 ;\cf2 \strokec2        \cf3 \strokec3 // How many allocation points assigned to this pool. TIGERS to distribute per block.\cf2 \cb1 \strokec2 \
\cb4         \cf5 \strokec5 uint256\cf2 \strokec2  lastRewardBlock\cf7 \strokec7 ;\cf2 \strokec2   \cf3 \strokec3 // Last block number that TIGERS distribution occurs.\cf2 \cb1 \strokec2 \
\cb4         \cf5 \strokec5 uint256\cf2 \strokec2  accTigersPerShare\cf7 \strokec7 ;\cf2 \strokec2    \cf3 \strokec3 // Accumulated TIGERS per share, times 1e12. See below.\cf2 \cb1 \strokec2 \
\cb4         \cf5 \strokec5 uint16\cf2 \strokec2  depositFeeBP\cf7 \strokec7 ;\cf2 \strokec2       \cf3 \strokec3 // Deposit fee in basis points\cf2 \cb1 \strokec2 \
\cb4     \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\
\cb4     \cf3 \strokec3 // The TIGERS TOKEN!\cf2 \cb1 \strokec2 \
\cb4     TIGERS \cf8 \strokec8 public\cf2 \strokec2  tigers\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\cb4     \cf3 \strokec3 // Dev address.\cf2 \cb1 \strokec2 \
\cb4     \cf5 \strokec5 address\cf2 \strokec2  \cf8 \strokec8 public\cf2 \strokec2  devaddr\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\cb4     \cf3 \strokec3 // TIGERS tokens created per block.\cf2 \cb1 \strokec2 \
\cb4     \cf5 \strokec5 uint256\cf2 \strokec2  \cf8 \strokec8 public\cf2 \strokec2  tigersPerBlock\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\cb4     \cf3 \strokec3 // Bonus muliplier for early TIGERS makers.\cf2 \cb1 \strokec2 \
\cb4     \cf5 \strokec5 uint256\cf2 \strokec2  \cf8 \strokec8 public\cf2 \strokec2  \cf5 \strokec5 constant\cf2 \strokec2  BONUS_MULTIPLIER \cf7 \strokec7 =\cf2 \strokec2  \cf6 \strokec6 1\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\cb4     \cf3 \strokec3 // Deposit Fee address\cf2 \cb1 \strokec2 \
\cb4     \cf5 \strokec5 address\cf2 \strokec2  \cf8 \strokec8 public\cf2 \strokec2  feeAddress\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\
\cb4     \cf3 \strokec3 // Info of each pool.\cf2 \cb1 \strokec2 \
\cb4     PoolInfo\cf7 \strokec7 []\cf2 \strokec2  \cf8 \strokec8 public\cf2 \strokec2  poolInfo\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\cb4     \cf3 \strokec3 // Info of each user that stakes LP tokens.\cf2 \cb1 \strokec2 \
\cb4     \cf5 \strokec5 mapping\cf2 \strokec2  \cf7 \strokec7 (\cf5 \strokec5 uint256\cf2 \strokec2  => \cf5 \strokec5 mapping\cf2 \strokec2  \cf7 \strokec7 (\cf5 \strokec5 address\cf2 \strokec2  => UserInfo\cf7 \strokec7 ))\cf2 \strokec2  \cf8 \strokec8 public\cf2 \strokec2  userInfo\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\cb4     \cf3 \strokec3 // Total allocation points. Must be the sum of all allocation points in all pools.\cf2 \cb1 \strokec2 \
\cb4     \cf5 \strokec5 uint256\cf2 \strokec2  \cf8 \strokec8 public\cf2 \strokec2  totalAllocPoint \cf7 \strokec7 =\cf2 \strokec2  \cf6 \strokec6 0\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\cb4     \cf3 \strokec3 // The block number when TIGERS mining starts.\cf2 \cb1 \strokec2 \
\cb4     \cf5 \strokec5 uint256\cf2 \strokec2  \cf8 \strokec8 public\cf2 \strokec2  startBlock\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\
\cb4     \cf5 \strokec5 event\cf2 \strokec2  Deposit\cf7 \strokec7 (\cf5 \strokec5 address\cf2 \strokec2  \cf13 \strokec13 indexed\cf2 \strokec2  user\cf7 \strokec7 ,\cf2 \strokec2  \cf5 \strokec5 uint256\cf2 \strokec2  \cf13 \strokec13 indexed\cf2 \strokec2  pid\cf7 \strokec7 ,\cf2 \strokec2  \cf5 \strokec5 uint256\cf2 \strokec2  amount\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4     \cf5 \strokec5 event\cf2 \strokec2  Withdraw\cf7 \strokec7 (\cf5 \strokec5 address\cf2 \strokec2  \cf13 \strokec13 indexed\cf2 \strokec2  user\cf7 \strokec7 ,\cf2 \strokec2  \cf5 \strokec5 uint256\cf2 \strokec2  \cf13 \strokec13 indexed\cf2 \strokec2  pid\cf7 \strokec7 ,\cf2 \strokec2  \cf5 \strokec5 uint256\cf2 \strokec2  amount\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4     \cf5 \strokec5 event\cf2 \strokec2  EmergencyWithdraw\cf7 \strokec7 (\cf5 \strokec5 address\cf2 \strokec2  \cf13 \strokec13 indexed\cf2 \strokec2  user\cf7 \strokec7 ,\cf2 \strokec2  \cf5 \strokec5 uint256\cf2 \strokec2  \cf13 \strokec13 indexed\cf2 \strokec2  pid\cf7 \strokec7 ,\cf2 \strokec2  \cf5 \strokec5 uint256\cf2 \strokec2  amount\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4     \cf5 \strokec5 event\cf2 \strokec2  SetFeeAddress\cf7 \strokec7 (\cf5 \strokec5 address\cf2 \strokec2  \cf13 \strokec13 indexed\cf2 \strokec2  user\cf7 \strokec7 ,\cf2 \strokec2  \cf5 \strokec5 address\cf2 \strokec2  \cf13 \strokec13 indexed\cf2 \strokec2  newAddress\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4     \cf5 \strokec5 event\cf2 \strokec2  SetDevAddress\cf7 \strokec7 (\cf5 \strokec5 address\cf2 \strokec2  \cf13 \strokec13 indexed\cf2 \strokec2  user\cf7 \strokec7 ,\cf2 \strokec2  \cf5 \strokec5 address\cf2 \strokec2  \cf13 \strokec13 indexed\cf2 \strokec2  newAddress\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4     \cf5 \strokec5 event\cf2 \strokec2  UpdateEmissionRate\cf7 \strokec7 (\cf5 \strokec5 address\cf2 \strokec2  \cf13 \strokec13 indexed\cf2 \strokec2  user\cf7 \strokec7 ,\cf2 \strokec2  \cf5 \strokec5 uint256\cf2 \strokec2  tigersPerBlock\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\
\cb4     \cf14 \strokec14 constructor\cf7 \strokec7 (\cf2 \cb1 \strokec2 \
\cb4         TIGERS _tigers\cf7 \strokec7 ,\cf2 \cb1 \strokec2 \
\cb4         \cf5 \strokec5 address\cf2 \strokec2  _devaddr\cf7 \strokec7 ,\cf2 \cb1 \strokec2 \
\cb4         \cf5 \strokec5 address\cf2 \strokec2  _feeAddress\cf7 \strokec7 ,\cf2 \cb1 \strokec2 \
\cb4         \cf5 \strokec5 uint256\cf2 \strokec2  _tigersPerBlock\cf7 \strokec7 ,\cf2 \cb1 \strokec2 \
\cb4         \cf5 \strokec5 uint256\cf2 \strokec2  _startBlock\cb1 \
\cb4     \cf7 \strokec7 )\cf2 \strokec2  \cf8 \strokec8 public\cf2 \strokec2  \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4         tigers \cf7 \strokec7 =\cf2 \strokec2  _tigers\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\cb4         devaddr \cf7 \strokec7 =\cf2 \strokec2  _devaddr\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\cb4         feeAddress \cf7 \strokec7 =\cf2 \strokec2  _feeAddress\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\cb4         tigersPerBlock \cf7 \strokec7 =\cf2 \strokec2  _tigersPerBlock\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\cb4         startBlock \cf7 \strokec7 =\cf2 \strokec2  _startBlock\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\cb4     \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\
\cb4     \cf5 \strokec5 function\cf2 \strokec2  poolLength\cf7 \strokec7 ()\cf2 \strokec2  \cf8 \strokec8 external\cf2 \strokec2  \cf8 \strokec8 view\cf2 \strokec2  \cf11 \strokec11 returns\cf2 \strokec2  \cf7 \strokec7 (\cf5 \strokec5 uint256\cf7 \strokec7 )\cf2 \strokec2  \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4         \cf11 \strokec11 return\cf2 \strokec2  poolInfo\cf7 \strokec7 .\cf2 \strokec2 length\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\cb4     \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\
\cb4     \cf5 \strokec5 mapping\cf7 \strokec7 (\cf2 \strokec2 IBEP20 => \cf5 \strokec5 bool\cf7 \strokec7 )\cf2 \strokec2  \cf8 \strokec8 public\cf2 \strokec2  poolExistence\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\cb4     \cf5 \strokec5 modifier\cf2 \strokec2  nonDuplicated\cf7 \strokec7 (\cf2 \strokec2 IBEP20 _lpToken\cf7 \strokec7 )\cf2 \strokec2  \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4         \cf9 \strokec9 require\cf7 \strokec7 (\cf2 \strokec2 poolExistence\cf7 \strokec7 [\cf2 \strokec2 _lpToken\cf7 \strokec7 ]\cf2 \strokec2  \cf7 \strokec7 ==\cf2 \strokec2  \cf5 \strokec5 false\cf7 \strokec7 ,\cf2 \strokec2  \cf15 \strokec15 "nonDuplicated: duplicated"\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4         _\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\cb4     \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\
\cb4     \cf3 \strokec3 // Add a new lp to the pool. Can only be called by the owner.\cf2 \cb1 \strokec2 \
\cb4     \cf5 \strokec5 function\cf2 \strokec2  add\cf7 \strokec7 (\cf5 \strokec5 uint256\cf2 \strokec2  _allocPoint\cf7 \strokec7 ,\cf2 \strokec2  IBEP20 _lpToken\cf7 \strokec7 ,\cf2 \strokec2  \cf5 \strokec5 uint16\cf2 \strokec2  _depositFeeBP\cf7 \strokec7 ,\cf2 \strokec2  \cf5 \strokec5 bool\cf2 \strokec2  _withUpdate\cf7 \strokec7 )\cf2 \strokec2  \cf8 \strokec8 public\cf2 \strokec2  onlyOwner nonDuplicated\cf7 \strokec7 (\cf2 \strokec2 _lpToken\cf7 \strokec7 )\cf2 \strokec2  \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4         \cf9 \strokec9 require\cf7 \strokec7 (\cf2 \strokec2 _depositFeeBP \cf7 \strokec7 <=\cf2 \strokec2  \cf6 \strokec6 10000\cf7 \strokec7 ,\cf2 \strokec2  \cf15 \strokec15 "add: invalid deposit fee basis points"\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4         \cf13 \strokec13 if\cf2 \strokec2  \cf7 \strokec7 (\cf2 \strokec2 _withUpdate\cf7 \strokec7 )\cf2 \strokec2  \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4             massUpdatePools\cf7 \strokec7 ();\cf2 \cb1 \strokec2 \
\cb4         \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\cb4         \cf5 \strokec5 uint256\cf2 \strokec2  lastRewardBlock \cf7 \strokec7 =\cf2 \strokec2  \cf9 \strokec9 block\cf7 \strokec7 .\cf2 \strokec2 number \cf7 \strokec7 >\cf2 \strokec2  startBlock \cf7 \strokec7 ?\cf2 \strokec2  \cf9 \strokec9 block\cf7 \strokec7 .\cf2 \strokec2 number \cf7 \strokec7 :\cf2 \strokec2  startBlock\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\cb4         totalAllocPoint \cf7 \strokec7 =\cf2 \strokec2  totalAllocPoint\cf7 \strokec7 .\cf2 \strokec2 add\cf7 \strokec7 (\cf2 \strokec2 _allocPoint\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4         poolExistence\cf7 \strokec7 [\cf2 \strokec2 _lpToken\cf7 \strokec7 ]\cf2 \strokec2  \cf7 \strokec7 =\cf2 \strokec2  \cf5 \strokec5 true\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\cb4         poolInfo\cf7 \strokec7 .\cf2 \strokec2 push\cf7 \strokec7 (\cf2 \strokec2 PoolInfo\cf7 \strokec7 (\{\cf2 \cb1 \strokec2 \
\cb4         lpToken \cf7 \strokec7 :\cf2 \strokec2  _lpToken\cf7 \strokec7 ,\cf2 \cb1 \strokec2 \
\cb4         allocPoint \cf7 \strokec7 :\cf2 \strokec2  _allocPoint\cf7 \strokec7 ,\cf2 \cb1 \strokec2 \
\cb4         lastRewardBlock \cf7 \strokec7 :\cf2 \strokec2  lastRewardBlock\cf7 \strokec7 ,\cf2 \cb1 \strokec2 \
\cb4         accTigersPerShare \cf7 \strokec7 :\cf2 \strokec2  \cf6 \strokec6 0\cf7 \strokec7 ,\cf2 \cb1 \strokec2 \
\cb4         depositFeeBP \cf7 \strokec7 :\cf2 \strokec2  _depositFeeBP\cb1 \
\cb4         \cf7 \strokec7 \}));\cf2 \cb1 \strokec2 \
\cb4     \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\
\cb4     \cf3 \strokec3 // Update the given pool's tigers allocation point and deposit fee. Can only be called by the owner.\cf2 \cb1 \strokec2 \
\cb4     \cf5 \strokec5 function\cf2 \strokec2  set\cf7 \strokec7 (\cf5 \strokec5 uint256\cf2 \strokec2  _pid\cf7 \strokec7 ,\cf2 \strokec2  \cf5 \strokec5 uint256\cf2 \strokec2  _allocPoint\cf7 \strokec7 ,\cf2 \strokec2  \cf5 \strokec5 uint16\cf2 \strokec2  _depositFeeBP\cf7 \strokec7 ,\cf2 \strokec2  \cf5 \strokec5 bool\cf2 \strokec2  _withUpdate\cf7 \strokec7 )\cf2 \strokec2  \cf8 \strokec8 public\cf2 \strokec2  onlyOwner \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4         \cf9 \strokec9 require\cf7 \strokec7 (\cf2 \strokec2 _depositFeeBP \cf7 \strokec7 <=\cf2 \strokec2  \cf6 \strokec6 10000\cf7 \strokec7 ,\cf2 \strokec2  \cf15 \strokec15 "set: invalid deposit fee basis points"\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4         \cf13 \strokec13 if\cf2 \strokec2  \cf7 \strokec7 (\cf2 \strokec2 _withUpdate\cf7 \strokec7 )\cf2 \strokec2  \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4             massUpdatePools\cf7 \strokec7 ();\cf2 \cb1 \strokec2 \
\cb4         \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\cb4         totalAllocPoint \cf7 \strokec7 =\cf2 \strokec2  totalAllocPoint\cf7 \strokec7 .\cf2 \strokec2 sub\cf7 \strokec7 (\cf2 \strokec2 poolInfo\cf7 \strokec7 [\cf2 \strokec2 _pid\cf7 \strokec7 ].\cf2 \strokec2 allocPoint\cf7 \strokec7 ).\cf2 \strokec2 add\cf7 \strokec7 (\cf2 \strokec2 _allocPoint\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4         poolInfo\cf7 \strokec7 [\cf2 \strokec2 _pid\cf7 \strokec7 ].\cf2 \strokec2 allocPoint \cf7 \strokec7 =\cf2 \strokec2  _allocPoint\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\cb4         poolInfo\cf7 \strokec7 [\cf2 \strokec2 _pid\cf7 \strokec7 ].\cf2 \strokec2 depositFeeBP \cf7 \strokec7 =\cf2 \strokec2  _depositFeeBP\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\cb4     \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\
\cb4     \cf3 \strokec3 // Return reward multiplier over the given _from to _to block.\cf2 \cb1 \strokec2 \
\cb4     \cf5 \strokec5 function\cf2 \strokec2  getMultiplier\cf7 \strokec7 (\cf5 \strokec5 uint256\cf2 \strokec2  _from\cf7 \strokec7 ,\cf2 \strokec2  \cf5 \strokec5 uint256\cf2 \strokec2  _to\cf7 \strokec7 )\cf2 \strokec2  \cf8 \strokec8 public\cf2 \strokec2  \cf8 \strokec8 view\cf2 \strokec2  \cf11 \strokec11 returns\cf2 \strokec2  \cf7 \strokec7 (\cf5 \strokec5 uint256\cf7 \strokec7 )\cf2 \strokec2  \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4         \cf11 \strokec11 return\cf2 \strokec2  _to\cf7 \strokec7 .\cf2 \strokec2 sub\cf7 \strokec7 (\cf2 \strokec2 _from\cf7 \strokec7 ).\cf2 \strokec2 mul\cf7 \strokec7 (\cf2 \strokec2 BONUS_MULTIPLIER\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4     \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\
\cb4     \cf3 \strokec3 // View function to see pending tigers on frontend.\cf2 \cb1 \strokec2 \
\cb4     \cb1 \
\cb4     \cf5 \strokec5 function\cf2 \strokec2  pendingTigers\cf7 \strokec7 (\cf5 \strokec5 uint256\cf2 \strokec2  _pid\cf7 \strokec7 ,\cf2 \strokec2  \cf5 \strokec5 address\cf2 \strokec2  _user\cf7 \strokec7 )\cf2 \strokec2  \cf8 \strokec8 external\cf2 \strokec2  \cf8 \strokec8 view\cf2 \strokec2  \cf11 \strokec11 returns\cf2 \strokec2  \cf7 \strokec7 (\cf5 \strokec5 uint256\cf7 \strokec7 )\cf2 \strokec2  \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4         PoolInfo \cf12 \strokec12 storage\cf2 \strokec2  pool \cf7 \strokec7 =\cf2 \strokec2  poolInfo\cf7 \strokec7 [\cf2 \strokec2 _pid\cf7 \strokec7 ];\cf2 \cb1 \strokec2 \
\cb4         UserInfo \cf12 \strokec12 storage\cf2 \strokec2  user \cf7 \strokec7 =\cf2 \strokec2  userInfo\cf7 \strokec7 [\cf2 \strokec2 _pid\cf7 \strokec7 ][\cf2 \strokec2 _user\cf7 \strokec7 ];\cf2 \cb1 \strokec2 \
\cb4         \cf5 \strokec5 uint256\cf2 \strokec2  accTigersPerShare \cf7 \strokec7 =\cf2 \strokec2  pool\cf7 \strokec7 .\cf2 \strokec2 accTigersPerShare\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\cb4         \cf5 \strokec5 uint256\cf2 \strokec2  lpSupply \cf7 \strokec7 =\cf2 \strokec2  pool\cf7 \strokec7 .\cf2 \strokec2 lpToken\cf7 \strokec7 .\cf2 \strokec2 balanceOf\cf7 \strokec7 (\cf5 \strokec5 address\cf7 \strokec7 (\cf10 \strokec10 this\cf7 \strokec7 ));\cf2 \cb1 \strokec2 \
\cb4         \cf13 \strokec13 if\cf2 \strokec2  \cf7 \strokec7 (\cf9 \strokec9 block\cf7 \strokec7 .\cf2 \strokec2 number \cf7 \strokec7 >\cf2 \strokec2  pool\cf7 \strokec7 .\cf2 \strokec2 lastRewardBlock \cf7 \strokec7 &&\cf2 \strokec2  lpSupply \cf7 \strokec7 !=\cf2 \strokec2  \cf6 \strokec6 0\cf7 \strokec7 )\cf2 \strokec2  \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4             \cf5 \strokec5 uint256\cf2 \strokec2  multiplier \cf7 \strokec7 =\cf2 \strokec2  getMultiplier\cf7 \strokec7 (\cf2 \strokec2 pool\cf7 \strokec7 .\cf2 \strokec2 lastRewardBlock\cf7 \strokec7 ,\cf2 \strokec2  \cf9 \strokec9 block\cf7 \strokec7 .\cf2 \strokec2 number\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4             \cf5 \strokec5 uint256\cf2 \strokec2  tigersReward \cf7 \strokec7 =\cf2 \strokec2  multiplier\cf7 \strokec7 .\cf2 \strokec2 mul\cf7 \strokec7 (\cf2 \strokec2 tigersPerBlock\cf7 \strokec7 ).\cf2 \strokec2 mul\cf7 \strokec7 (\cf2 \strokec2 pool\cf7 \strokec7 .\cf2 \strokec2 allocPoint\cf7 \strokec7 ).\cf2 \strokec2 div\cf7 \strokec7 (\cf2 \strokec2 totalAllocPoint\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4             accTigersPerShare \cf7 \strokec7 =\cf2 \strokec2  accTigersPerShare\cf7 \strokec7 .\cf2 \strokec2 add\cf7 \strokec7 (\cf2 \strokec2 tigersReward\cf7 \strokec7 .\cf2 \strokec2 mul\cf7 \strokec7 (\cf6 \strokec6 1e12\cf7 \strokec7 ).\cf2 \strokec2 div\cf7 \strokec7 (\cf2 \strokec2 lpSupply\cf7 \strokec7 ));\cf2 \cb1 \strokec2 \
\cb4         \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\cb4         \cf11 \strokec11 return\cf2 \strokec2  user\cf7 \strokec7 .\cf2 \strokec2 amount\cf7 \strokec7 .\cf2 \strokec2 mul\cf7 \strokec7 (\cf2 \strokec2 accTigersPerShare\cf7 \strokec7 ).\cf2 \strokec2 div\cf7 \strokec7 (\cf6 \strokec6 1e12\cf7 \strokec7 ).\cf2 \strokec2 sub\cf7 \strokec7 (\cf2 \strokec2 user\cf7 \strokec7 .\cf2 \strokec2 rewardDebt\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4     \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\
\cb4     \cf3 \strokec3 // Update reward variables for all pools. Be careful of gas spending!\cf2 \cb1 \strokec2 \
\cb4     \cf5 \strokec5 function\cf2 \strokec2  massUpdatePools\cf7 \strokec7 ()\cf2 \strokec2  \cf8 \strokec8 public\cf2 \strokec2  \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4         \cf5 \strokec5 uint256\cf2 \strokec2  length \cf7 \strokec7 =\cf2 \strokec2  poolInfo\cf7 \strokec7 .\cf2 \strokec2 length\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\cb4         \cf16 \strokec16 for\cf2 \strokec2  \cf7 \strokec7 (\cf5 \strokec5 uint256\cf2 \strokec2  pid \cf7 \strokec7 =\cf2 \strokec2  \cf6 \strokec6 0\cf7 \strokec7 ;\cf2 \strokec2  pid \cf7 \strokec7 <\cf2 \strokec2  length\cf7 \strokec7 ;\cf2 \strokec2  \cf7 \strokec7 ++\cf2 \strokec2 pid\cf7 \strokec7 )\cf2 \strokec2  \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4             updatePool\cf7 \strokec7 (\cf2 \strokec2 pid\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4         \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\cb4     \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\
\cb4     \cf3 \strokec3 // Update reward variables of the given pool to be up-to-date.\cf2 \cb1 \strokec2 \
\cb4     \cf5 \strokec5 function\cf2 \strokec2  updatePool\cf7 \strokec7 (\cf5 \strokec5 uint256\cf2 \strokec2  _pid\cf7 \strokec7 )\cf2 \strokec2  \cf8 \strokec8 public\cf2 \strokec2  \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4         PoolInfo \cf12 \strokec12 storage\cf2 \strokec2  pool \cf7 \strokec7 =\cf2 \strokec2  poolInfo\cf7 \strokec7 [\cf2 \strokec2 _pid\cf7 \strokec7 ];\cf2 \cb1 \strokec2 \
\cb4         \cf13 \strokec13 if\cf2 \strokec2  \cf7 \strokec7 (\cf9 \strokec9 block\cf7 \strokec7 .\cf2 \strokec2 number \cf7 \strokec7 <=\cf2 \strokec2  pool\cf7 \strokec7 .\cf2 \strokec2 lastRewardBlock\cf7 \strokec7 )\cf2 \strokec2  \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4             \cf11 \strokec11 return\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\cb4         \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\cb4         \cf5 \strokec5 uint256\cf2 \strokec2  lpSupply \cf7 \strokec7 =\cf2 \strokec2  pool\cf7 \strokec7 .\cf2 \strokec2 lpToken\cf7 \strokec7 .\cf2 \strokec2 balanceOf\cf7 \strokec7 (\cf5 \strokec5 address\cf7 \strokec7 (\cf10 \strokec10 this\cf7 \strokec7 ));\cf2 \cb1 \strokec2 \
\cb4         \cf13 \strokec13 if\cf2 \strokec2  \cf7 \strokec7 (\cf2 \strokec2 lpSupply \cf7 \strokec7 ==\cf2 \strokec2  \cf6 \strokec6 0\cf2 \strokec2  \cf7 \strokec7 ||\cf2 \strokec2  pool\cf7 \strokec7 .\cf2 \strokec2 allocPoint \cf7 \strokec7 ==\cf2 \strokec2  \cf6 \strokec6 0\cf7 \strokec7 )\cf2 \strokec2  \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4             pool\cf7 \strokec7 .\cf2 \strokec2 lastRewardBlock \cf7 \strokec7 =\cf2 \strokec2  \cf9 \strokec9 block\cf7 \strokec7 .\cf2 \strokec2 number\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\cb4             \cf11 \strokec11 return\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\cb4         \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\cb4         \cf5 \strokec5 uint256\cf2 \strokec2  multiplier \cf7 \strokec7 =\cf2 \strokec2  getMultiplier\cf7 \strokec7 (\cf2 \strokec2 pool\cf7 \strokec7 .\cf2 \strokec2 lastRewardBlock\cf7 \strokec7 ,\cf2 \strokec2  \cf9 \strokec9 block\cf7 \strokec7 .\cf2 \strokec2 number\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4         \cf5 \strokec5 uint256\cf2 \strokec2  tigersReward \cf7 \strokec7 =\cf2 \strokec2  multiplier\cf7 \strokec7 .\cf2 \strokec2 mul\cf7 \strokec7 (\cf2 \strokec2 tigersPerBlock\cf7 \strokec7 ).\cf2 \strokec2 mul\cf7 \strokec7 (\cf2 \strokec2 pool\cf7 \strokec7 .\cf2 \strokec2 allocPoint\cf7 \strokec7 ).\cf2 \strokec2 div\cf7 \strokec7 (\cf2 \strokec2 totalAllocPoint\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4         tigers\cf7 \strokec7 .\cf2 \strokec2 mint\cf7 \strokec7 (\cf2 \strokec2 devaddr\cf7 \strokec7 ,\cf2 \strokec2  tigersReward\cf7 \strokec7 .\cf2 \strokec2 div\cf7 \strokec7 (\cf6 \strokec6 10\cf7 \strokec7 ));\cf2 \cb1 \strokec2 \
\cb4         tigers\cf7 \strokec7 .\cf2 \strokec2 mint\cf7 \strokec7 (\cf5 \strokec5 address\cf7 \strokec7 (\cf10 \strokec10 this\cf7 \strokec7 ),\cf2 \strokec2  tigersReward\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4         pool\cf7 \strokec7 .\cf2 \strokec2 accTigersPerShare \cf7 \strokec7 =\cf2 \strokec2  pool\cf7 \strokec7 .\cf2 \strokec2 accTigersPerShare\cf7 \strokec7 .\cf2 \strokec2 add\cf7 \strokec7 (\cf2 \strokec2 tigersReward\cf7 \strokec7 .\cf2 \strokec2 mul\cf7 \strokec7 (\cf6 \strokec6 1e12\cf7 \strokec7 ).\cf2 \strokec2 div\cf7 \strokec7 (\cf2 \strokec2 lpSupply\cf7 \strokec7 ));\cf2 \cb1 \strokec2 \
\cb4         pool\cf7 \strokec7 .\cf2 \strokec2 lastRewardBlock \cf7 \strokec7 =\cf2 \strokec2  \cf9 \strokec9 block\cf7 \strokec7 .\cf2 \strokec2 number\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\cb4     \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\
\cb4     \cf3 \strokec3 // Deposit LP tokens to MasterChef for tigers allocation.\cf2 \cb1 \strokec2 \
\cb4     \cf5 \strokec5 function\cf2 \strokec2  deposit\cf7 \strokec7 (\cf5 \strokec5 uint256\cf2 \strokec2  _pid\cf7 \strokec7 ,\cf2 \strokec2  \cf5 \strokec5 uint256\cf2 \strokec2  _amount\cf7 \strokec7 )\cf2 \strokec2  \cf8 \strokec8 public\cf2 \strokec2  nonReentrant \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4         PoolInfo \cf12 \strokec12 storage\cf2 \strokec2  pool \cf7 \strokec7 =\cf2 \strokec2  poolInfo\cf7 \strokec7 [\cf2 \strokec2 _pid\cf7 \strokec7 ];\cf2 \cb1 \strokec2 \
\cb4         UserInfo \cf12 \strokec12 storage\cf2 \strokec2  user \cf7 \strokec7 =\cf2 \strokec2  userInfo\cf7 \strokec7 [\cf2 \strokec2 _pid\cf7 \strokec7 ][\cf9 \strokec9 msg\cf7 \strokec7 .\cf2 \strokec2 sender\cf7 \strokec7 ];\cf2 \cb1 \strokec2 \
\cb4         updatePool\cf7 \strokec7 (\cf2 \strokec2 _pid\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4         \cf13 \strokec13 if\cf2 \strokec2  \cf7 \strokec7 (\cf2 \strokec2 user\cf7 \strokec7 .\cf2 \strokec2 amount \cf7 \strokec7 >\cf2 \strokec2  \cf6 \strokec6 0\cf7 \strokec7 )\cf2 \strokec2  \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4             \cf5 \strokec5 uint256\cf2 \strokec2  pending \cf7 \strokec7 =\cf2 \strokec2  user\cf7 \strokec7 .\cf2 \strokec2 amount\cf7 \strokec7 .\cf2 \strokec2 mul\cf7 \strokec7 (\cf2 \strokec2 pool\cf7 \strokec7 .\cf2 \strokec2 accTigersPerShare\cf7 \strokec7 ).\cf2 \strokec2 div\cf7 \strokec7 (\cf6 \strokec6 1e12\cf7 \strokec7 ).\cf2 \strokec2 sub\cf7 \strokec7 (\cf2 \strokec2 user\cf7 \strokec7 .\cf2 \strokec2 rewardDebt\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4             \cf13 \strokec13 if\cf2 \strokec2  \cf7 \strokec7 (\cf2 \strokec2 pending \cf7 \strokec7 >\cf2 \strokec2  \cf6 \strokec6 0\cf7 \strokec7 )\cf2 \strokec2  \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4                 safeTigersTransfer\cf7 \strokec7 (\cf9 \strokec9 msg\cf7 \strokec7 .\cf2 \strokec2 sender\cf7 \strokec7 ,\cf2 \strokec2  pending\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4             \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\cb4         \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\cb4         \cf13 \strokec13 if\cf2 \strokec2  \cf7 \strokec7 (\cf2 \strokec2 _amount \cf7 \strokec7 >\cf2 \strokec2  \cf6 \strokec6 0\cf7 \strokec7 )\cf2 \strokec2  \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4             pool\cf7 \strokec7 .\cf2 \strokec2 lpToken\cf7 \strokec7 .\cf2 \strokec2 safeTransferFrom\cf7 \strokec7 (\cf5 \strokec5 address\cf7 \strokec7 (\cf9 \strokec9 msg\cf7 \strokec7 .\cf2 \strokec2 sender\cf7 \strokec7 ),\cf2 \strokec2  \cf5 \strokec5 address\cf7 \strokec7 (\cf10 \strokec10 this\cf7 \strokec7 ),\cf2 \strokec2  _amount\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4             \cf13 \strokec13 if\cf2 \strokec2  \cf7 \strokec7 (\cf2 \strokec2 pool\cf7 \strokec7 .\cf2 \strokec2 depositFeeBP \cf7 \strokec7 >\cf2 \strokec2  \cf6 \strokec6 0\cf7 \strokec7 )\cf2 \strokec2  \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4                 \cf5 \strokec5 uint256\cf2 \strokec2  depositFee \cf7 \strokec7 =\cf2 \strokec2  _amount\cf7 \strokec7 .\cf2 \strokec2 mul\cf7 \strokec7 (\cf2 \strokec2 pool\cf7 \strokec7 .\cf2 \strokec2 depositFeeBP\cf7 \strokec7 ).\cf2 \strokec2 div\cf7 \strokec7 (\cf6 \strokec6 10000\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4                 pool\cf7 \strokec7 .\cf2 \strokec2 lpToken\cf7 \strokec7 .\cf2 \strokec2 safeTransfer\cf7 \strokec7 (\cf2 \strokec2 feeAddress\cf7 \strokec7 ,\cf2 \strokec2  depositFee\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4                 user\cf7 \strokec7 .\cf2 \strokec2 amount \cf7 \strokec7 =\cf2 \strokec2  user\cf7 \strokec7 .\cf2 \strokec2 amount\cf7 \strokec7 .\cf2 \strokec2 add\cf7 \strokec7 (\cf2 \strokec2 _amount\cf7 \strokec7 ).\cf2 \strokec2 sub\cf7 \strokec7 (\cf2 \strokec2 depositFee\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4             \cf7 \strokec7 \}\cf2 \strokec2  \cf13 \strokec13 else\cf2 \strokec2  \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4                 user\cf7 \strokec7 .\cf2 \strokec2 amount \cf7 \strokec7 =\cf2 \strokec2  user\cf7 \strokec7 .\cf2 \strokec2 amount\cf7 \strokec7 .\cf2 \strokec2 add\cf7 \strokec7 (\cf2 \strokec2 _amount\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4             \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\cb4         \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\cb4         user\cf7 \strokec7 .\cf2 \strokec2 rewardDebt \cf7 \strokec7 =\cf2 \strokec2  user\cf7 \strokec7 .\cf2 \strokec2 amount\cf7 \strokec7 .\cf2 \strokec2 mul\cf7 \strokec7 (\cf2 \strokec2 pool\cf7 \strokec7 .\cf2 \strokec2 accTigersPerShare\cf7 \strokec7 ).\cf2 \strokec2 div\cf7 \strokec7 (\cf6 \strokec6 1e12\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4         \cf5 \strokec5 emit\cf2 \strokec2  Deposit\cf7 \strokec7 (\cf9 \strokec9 msg\cf7 \strokec7 .\cf2 \strokec2 sender\cf7 \strokec7 ,\cf2 \strokec2  _pid\cf7 \strokec7 ,\cf2 \strokec2  _amount\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4     \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\
\cb4     \cf3 \strokec3 // Withdraw LP tokens from MasterChef.\cf2 \cb1 \strokec2 \
\cb4     \cf5 \strokec5 function\cf2 \strokec2  withdraw\cf7 \strokec7 (\cf5 \strokec5 uint256\cf2 \strokec2  _pid\cf7 \strokec7 ,\cf2 \strokec2  \cf5 \strokec5 uint256\cf2 \strokec2  _amount\cf7 \strokec7 )\cf2 \strokec2  \cf8 \strokec8 public\cf2 \strokec2  nonReentrant \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4         PoolInfo \cf12 \strokec12 storage\cf2 \strokec2  pool \cf7 \strokec7 =\cf2 \strokec2  poolInfo\cf7 \strokec7 [\cf2 \strokec2 _pid\cf7 \strokec7 ];\cf2 \cb1 \strokec2 \
\cb4         UserInfo \cf12 \strokec12 storage\cf2 \strokec2  user \cf7 \strokec7 =\cf2 \strokec2  userInfo\cf7 \strokec7 [\cf2 \strokec2 _pid\cf7 \strokec7 ][\cf9 \strokec9 msg\cf7 \strokec7 .\cf2 \strokec2 sender\cf7 \strokec7 ];\cf2 \cb1 \strokec2 \
\cb4         \cf9 \strokec9 require\cf7 \strokec7 (\cf2 \strokec2 user\cf7 \strokec7 .\cf2 \strokec2 amount \cf7 \strokec7 >=\cf2 \strokec2  _amount\cf7 \strokec7 ,\cf2 \strokec2  \cf15 \strokec15 "withdraw: not good"\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4         updatePool\cf7 \strokec7 (\cf2 \strokec2 _pid\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4         \cf5 \strokec5 uint256\cf2 \strokec2  pending \cf7 \strokec7 =\cf2 \strokec2  user\cf7 \strokec7 .\cf2 \strokec2 amount\cf7 \strokec7 .\cf2 \strokec2 mul\cf7 \strokec7 (\cf2 \strokec2 pool\cf7 \strokec7 .\cf2 \strokec2 accTigersPerShare\cf7 \strokec7 ).\cf2 \strokec2 div\cf7 \strokec7 (\cf6 \strokec6 1e12\cf7 \strokec7 ).\cf2 \strokec2 sub\cf7 \strokec7 (\cf2 \strokec2 user\cf7 \strokec7 .\cf2 \strokec2 rewardDebt\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4         \cf13 \strokec13 if\cf2 \strokec2  \cf7 \strokec7 (\cf2 \strokec2 pending \cf7 \strokec7 >\cf2 \strokec2  \cf6 \strokec6 0\cf7 \strokec7 )\cf2 \strokec2  \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4             safeTigersTransfer\cf7 \strokec7 (\cf9 \strokec9 msg\cf7 \strokec7 .\cf2 \strokec2 sender\cf7 \strokec7 ,\cf2 \strokec2  pending\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4         \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\cb4         \cf13 \strokec13 if\cf2 \strokec2  \cf7 \strokec7 (\cf2 \strokec2 _amount \cf7 \strokec7 >\cf2 \strokec2  \cf6 \strokec6 0\cf7 \strokec7 )\cf2 \strokec2  \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4             user\cf7 \strokec7 .\cf2 \strokec2 amount \cf7 \strokec7 =\cf2 \strokec2  user\cf7 \strokec7 .\cf2 \strokec2 amount\cf7 \strokec7 .\cf2 \strokec2 sub\cf7 \strokec7 (\cf2 \strokec2 _amount\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4             pool\cf7 \strokec7 .\cf2 \strokec2 lpToken\cf7 \strokec7 .\cf2 \strokec2 safeTransfer\cf7 \strokec7 (\cf5 \strokec5 address\cf7 \strokec7 (\cf9 \strokec9 msg\cf7 \strokec7 .\cf2 \strokec2 sender\cf7 \strokec7 ),\cf2 \strokec2  _amount\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4         \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\cb4         user\cf7 \strokec7 .\cf2 \strokec2 rewardDebt \cf7 \strokec7 =\cf2 \strokec2  user\cf7 \strokec7 .\cf2 \strokec2 amount\cf7 \strokec7 .\cf2 \strokec2 mul\cf7 \strokec7 (\cf2 \strokec2 pool\cf7 \strokec7 .\cf2 \strokec2 accTigersPerShare\cf7 \strokec7 ).\cf2 \strokec2 div\cf7 \strokec7 (\cf6 \strokec6 1e12\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4         \cf5 \strokec5 emit\cf2 \strokec2  Withdraw\cf7 \strokec7 (\cf9 \strokec9 msg\cf7 \strokec7 .\cf2 \strokec2 sender\cf7 \strokec7 ,\cf2 \strokec2  _pid\cf7 \strokec7 ,\cf2 \strokec2  _amount\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4     \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\
\
\cb4     \cf3 \strokec3 // Withdraw without caring about rewards. EMERGENCY ONLY.\cf2 \cb1 \strokec2 \
\cb4     \cf5 \strokec5 function\cf2 \strokec2  emergencyWithdraw\cf7 \strokec7 (\cf5 \strokec5 uint256\cf2 \strokec2  _pid\cf7 \strokec7 )\cf2 \strokec2  \cf8 \strokec8 public\cf2 \strokec2  nonReentrant \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4         PoolInfo \cf12 \strokec12 storage\cf2 \strokec2  pool \cf7 \strokec7 =\cf2 \strokec2  poolInfo\cf7 \strokec7 [\cf2 \strokec2 _pid\cf7 \strokec7 ];\cf2 \cb1 \strokec2 \
\cb4         UserInfo \cf12 \strokec12 storage\cf2 \strokec2  user \cf7 \strokec7 =\cf2 \strokec2  userInfo\cf7 \strokec7 [\cf2 \strokec2 _pid\cf7 \strokec7 ][\cf9 \strokec9 msg\cf7 \strokec7 .\cf2 \strokec2 sender\cf7 \strokec7 ];\cf2 \cb1 \strokec2 \
\cb4         \cf5 \strokec5 uint256\cf2 \strokec2  amount \cf7 \strokec7 =\cf2 \strokec2  user\cf7 \strokec7 .\cf2 \strokec2 amount\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\cb4         user\cf7 \strokec7 .\cf2 \strokec2 amount \cf7 \strokec7 =\cf2 \strokec2  \cf6 \strokec6 0\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\cb4         user\cf7 \strokec7 .\cf2 \strokec2 rewardDebt \cf7 \strokec7 =\cf2 \strokec2  \cf6 \strokec6 0\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\cb4         pool\cf7 \strokec7 .\cf2 \strokec2 lpToken\cf7 \strokec7 .\cf2 \strokec2 safeTransfer\cf7 \strokec7 (\cf5 \strokec5 address\cf7 \strokec7 (\cf9 \strokec9 msg\cf7 \strokec7 .\cf2 \strokec2 sender\cf7 \strokec7 ),\cf2 \strokec2  amount\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4         \cf5 \strokec5 emit\cf2 \strokec2  EmergencyWithdraw\cf7 \strokec7 (\cf9 \strokec9 msg\cf7 \strokec7 .\cf2 \strokec2 sender\cf7 \strokec7 ,\cf2 \strokec2  _pid\cf7 \strokec7 ,\cf2 \strokec2  amount\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4     \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\
\cb4     \cf3 \strokec3 // Safe tigers transfer function, just in case if rounding error causes pool to not have enough tigers.\cf2 \cb1 \strokec2 \
\cb4     \cf5 \strokec5 function\cf2 \strokec2  safeTigersTransfer\cf7 \strokec7 (\cf5 \strokec5 address\cf2 \strokec2  _to\cf7 \strokec7 ,\cf2 \strokec2  \cf5 \strokec5 uint256\cf2 \strokec2  _amount\cf7 \strokec7 )\cf2 \strokec2  \cf8 \strokec8 internal\cf2 \strokec2  \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4         \cf5 \strokec5 uint256\cf2 \strokec2  tigersBal \cf7 \strokec7 =\cf2 \strokec2  tigers\cf7 \strokec7 .\cf2 \strokec2 balanceOf\cf7 \strokec7 (\cf5 \strokec5 address\cf7 \strokec7 (\cf10 \strokec10 this\cf7 \strokec7 ));\cf2 \cb1 \strokec2 \
\cb4         \cf5 \strokec5 bool\cf2 \strokec2  transferSuccess \cf7 \strokec7 =\cf2 \strokec2  \cf5 \strokec5 false\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\cb4         \cf13 \strokec13 if\cf2 \strokec2  \cf7 \strokec7 (\cf2 \strokec2 _amount \cf7 \strokec7 >\cf2 \strokec2  tigersBal\cf7 \strokec7 )\cf2 \strokec2  \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4             transferSuccess \cf7 \strokec7 =\cf2 \strokec2  tigers\cf7 \strokec7 .\cf2 \strokec2 transfer\cf7 \strokec7 (\cf2 \strokec2 _to\cf7 \strokec7 ,\cf2 \strokec2  tigersBal\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4         \cf7 \strokec7 \}\cf2 \strokec2  \cf13 \strokec13 else\cf2 \strokec2  \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4             transferSuccess \cf7 \strokec7 =\cf2 \strokec2  tigers\cf7 \strokec7 .\cf2 \strokec2 transfer\cf7 \strokec7 (\cf2 \strokec2 _to\cf7 \strokec7 ,\cf2 \strokec2  _amount\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4         \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\cb4         \cf9 \strokec9 require\cf7 \strokec7 (\cf2 \strokec2 transferSuccess\cf7 \strokec7 ,\cf2 \strokec2  \cf15 \strokec15 "safeTigersTransfer: transfer failed"\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4     \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\
\
\cb4     \cf3 \strokec3 // Update dev address by the previous dev.\cf2 \cb1 \strokec2 \
\cb4     \cf5 \strokec5 function\cf2 \strokec2  dev\cf7 \strokec7 (\cf5 \strokec5 address\cf2 \strokec2  _devaddr\cf7 \strokec7 )\cf2 \strokec2  \cf8 \strokec8 public\cf2 \strokec2  \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4         \cf9 \strokec9 require\cf7 \strokec7 (\cf9 \strokec9 msg\cf7 \strokec7 .\cf2 \strokec2 sender \cf7 \strokec7 ==\cf2 \strokec2  devaddr\cf7 \strokec7 ,\cf2 \strokec2  \cf15 \strokec15 "dev: wut?"\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4         devaddr \cf7 \strokec7 =\cf2 \strokec2  _devaddr\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\cb4         \cf5 \strokec5 emit\cf2 \strokec2  SetDevAddress\cf7 \strokec7 (\cf9 \strokec9 msg\cf7 \strokec7 .\cf2 \strokec2 sender\cf7 \strokec7 ,\cf2 \strokec2  _devaddr\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4     \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\
\cb4     \cf5 \strokec5 function\cf2 \strokec2  setFeeAddress\cf7 \strokec7 (\cf5 \strokec5 address\cf2 \strokec2  _feeAddress\cf7 \strokec7 )\cf2 \strokec2  \cf8 \strokec8 public\cf2 \strokec2  \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4         \cf9 \strokec9 require\cf7 \strokec7 (\cf9 \strokec9 msg\cf7 \strokec7 .\cf2 \strokec2 sender \cf7 \strokec7 ==\cf2 \strokec2  feeAddress\cf7 \strokec7 ,\cf2 \strokec2  \cf15 \strokec15 "setFeeAddress: FORBIDDEN"\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4         feeAddress \cf7 \strokec7 =\cf2 \strokec2  _feeAddress\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\cb4         \cf5 \strokec5 emit\cf2 \strokec2  SetFeeAddress\cf7 \strokec7 (\cf9 \strokec9 msg\cf7 \strokec7 .\cf2 \strokec2 sender\cf7 \strokec7 ,\cf2 \strokec2  _feeAddress\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4     \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\
\cb4     \cb1 \
\cb4     \cf5 \strokec5 function\cf2 \strokec2  updateEmissionRate\cf7 \strokec7 (\cf5 \strokec5 uint256\cf2 \strokec2  _tigersPerBlock\cf7 \strokec7 )\cf2 \strokec2  \cf8 \strokec8 public\cf2 \strokec2  onlyOwner \cf7 \strokec7 \{\cf2 \cb1 \strokec2 \
\cb4         massUpdatePools\cf7 \strokec7 ();\cf2 \cb1 \strokec2 \
\cb4         tigersPerBlock \cf7 \strokec7 =\cf2 \strokec2  _tigersPerBlock\cf7 \strokec7 ;\cf2 \cb1 \strokec2 \
\cb4         \cf5 \strokec5 emit\cf2 \strokec2  UpdateEmissionRate\cf7 \strokec7 (\cf9 \strokec9 msg\cf7 \strokec7 .\cf2 \strokec2 sender\cf7 \strokec7 ,\cf2 \strokec2  _tigersPerBlock\cf7 \strokec7 );\cf2 \cb1 \strokec2 \
\cb4     \cf7 \strokec7 \}\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0
\cf7 \cb4 \strokec7 \}\cf2 \cb1 \strokec2 \
}